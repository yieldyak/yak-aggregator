{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}\n\n\tfunction logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "src/contracts/adapters/aAvaxAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ISAVAX.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ninterface IwAVAX {\n    function withdraw(uint256) external;\n}\n\n/**\n * @notice wAVAX -> sAVAX\n **/\ncontract SAvaxAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public constant SAVAX = 0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE;\n    address public constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n\n    constructor(uint256 _swapGasEstimate) YakAdapter(\"SAvaxAdapter\", _swapGasEstimate) {\n        _setAllowances();\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_tokenIn == WAVAX && _tokenOut == SAVAX && !ISAVAX(SAVAX).mintingPaused() && !_exceedsCap(_amountIn)) {\n            amountOut = ISAVAX(SAVAX).getSharesByPooledAvax(_amountIn);\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        IwAVAX(WAVAX).withdraw(_amountIn);\n        uint256 shares = ISAVAX(SAVAX).submit{ value: _amountIn }();\n        require(shares >= _amountOut, \"YakAdapter: Amount-out too low\");\n        _returnTo(_tokenOut, shares, _to);\n    }\n\n    function _exceedsCap(uint256 _amountIn) internal view returns (bool) {\n        uint256 newBal = ISAVAX(SAVAX).totalPooledAvax() + _amountIn; // Assume U256::max won't be reached\n        return newBal > ISAVAX(SAVAX).totalPooledAvaxCap();\n    }\n\n    function _setAllowances() internal {\n        IERC20(WAVAX).safeApprove(WAVAX, UINT_MAX);\n    }\n}\n"
    },
    "src/contracts/adapters/AaveAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IAavePool.sol\";\nimport \"../interface/IAaveAToken.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract AaveAdapter is YakAdapter {\n    address public immutable aToken;\n    address public immutable pool;\n    address public immutable underlying;\n\n    constructor(string memory _name, address _aToken, uint256 _swapGasEstimate) YakAdapter(_name, _swapGasEstimate) {\n        aToken = _aToken;\n        address aavePool = IAaveAToken(_aToken).POOL();\n        pool = aavePool;\n        address underlyingToken = IAaveAToken(_aToken).UNDERLYING_ASSET_ADDRESS();\n        underlying = underlyingToken;\n        IERC20(underlyingToken).approve(aavePool, type(uint).max);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_tokenIn == underlying && _tokenOut == aToken) {\n            amountOut = _amountIn;\n        }\n    }\n\n    function _swap(uint256 _amountIn, uint256, address, address _tokenOut, address _to) internal override {\n        IAavePool(pool).supply(underlying, _amountIn, address(this), 0);\n        _returnTo(_tokenOut, _amountIn, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/AgniAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./UniswapV3AdapterBase.sol\";\n\ncontract AgniAdapter is UniswapV3AdapterBase {\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        uint256 _quoterGasLimit,\n        address _quoter,\n        address _factory,\n        uint24[] memory _defaultFees\n    ) UniswapV3AdapterBase(_name, _swapGasEstimate, _quoterGasLimit, _quoter, _factory, _defaultFees) {\n    }\n\n    function agniSwapCallback (\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata\n    ) external {\n        if (amount0Delta > 0) {\n            IERC20(IUniV3Pool(msg.sender).token0()).transfer(msg.sender, uint256(amount0Delta));\n        } else {\n            IERC20(IUniV3Pool(msg.sender).token1()).transfer(msg.sender, uint256(amount1Delta));\n        }\n    }\n}\n"
    },
    "src/contracts/adapters/AlgebraAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./UniswapV3likeAdapter.sol\";\n\ninterface IAlgebraFactory {\n    function poolByPair(address, address) external view returns (address);\n}\n\ncontract AlgebraAdapter is UniswapV3likeAdapter {\n    using SafeERC20 for IERC20;\n\n    address immutable FACTORY;\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        uint256 _quoterGasLimit,\n        address _quoter,\n        address _factory\n    ) UniswapV3likeAdapter(_name, _swapGasEstimate, _quoter, _quoterGasLimit) {\n        FACTORY = _factory;\n    }\n\n    function getBestPool(\n        address token0, \n        address token1\n    ) internal view override returns (address mostLiquid) {\n        return IAlgebraFactory(FACTORY).poolByPair(token0, token1);\n    }\n\n    function algebraSwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata\n    ) external {\n        if (amount0Delta > 0) {\n            IERC20(IUniV3Pool(msg.sender).token0()).transfer(msg.sender, uint256(amount0Delta));\n        } else {\n            IERC20(IUniV3Pool(msg.sender).token1()).transfer(msg.sender, uint256(amount1Delta));\n        }\n    }\n}\n"
    },
    "src/contracts/adapters/ArableSFAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport \"../interface/IStabilityFund.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract ArableSFAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public vault;\n    mapping(address => uint256) public tokenDecimals;\n\n    constructor(\n        string memory _name,\n        address _vault,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        vault = _vault;\n        setPoolTokens();\n    }\n\n    function setPoolTokens() public {\n        uint256 whitelistedTknsLen = IStabilityFund(vault).getStableTokensCount();\n        for (uint256 i = 0; i < whitelistedTknsLen; i++) {\n            address token = IStabilityFund(vault).getStableTokens()[i];\n            tokenDecimals[token] = IERC20(token).decimals();\n            uint256 allowance = IERC20(token).allowance(address(this), vault);\n            if (allowance < UINT_MAX) {\n                IERC20(token).safeApprove(vault, UINT_MAX);\n            }\n        }\n    }\n\n    function adjustForDecimals(\n        uint256 _amount,\n        address _tokenDiv,\n        address _tokenMul\n    ) internal view returns (uint256) {\n        uint256 decimalsDiv = tokenDecimals[_tokenDiv];\n        uint256 decimalsMul = tokenDecimals[_tokenMul];\n        return (_amount * 10**decimalsMul) / 10**decimalsDiv;\n    }\n\n    function hasVaultEnoughBal(address _token, uint256 _amount) private view returns (bool) {\n        return IERC20(_token).balanceOf(vault) >= _amount;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (\n            _amountIn == 0 ||\n            _tokenIn == _tokenOut ||\n            !IStabilityFund(vault).isStableToken(_tokenIn) ||\n            !IStabilityFund(vault).isStableToken(_tokenOut) ||\n            IStabilityFund(vault).isTokenDisabled(_tokenIn) ||\n            IStabilityFund(vault).isTokenDisabled(_tokenOut) ||\n            !IStabilityFund(vault).swapEnabled()\n        ) {\n            return 0;\n        }\n\n        uint256 amountOut = adjustForDecimals(_amountIn, _tokenIn, _tokenOut);\n        uint256 swapFee = IStabilityFund(vault).swapFee();\n        uint256 swapFeeDivisor = 1 ether;\n        uint256 feeAmount = (amountOut * swapFee) / swapFeeDivisor;\n        uint256 amountOutAfterFees = amountOut - feeAmount;\n        if (!hasVaultEnoughBal(_tokenOut, amountOutAfterFees)) {\n            return 0;\n        }\n\n        return amountOutAfterFees;\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        IStabilityFund(vault).swap(_tokenIn, _amountIn, _tokenOut);\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/BalancerV2Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// Supports Balancerlike pools\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\nimport \"../YakAdapter.sol\";\nimport \"../interface/IVault.sol\";\nimport \"../interface/IBasePool.sol\";\nimport \"../interface/IMinimalSwapInfoPool.sol\";\n\ncontract BalancerV2Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public vault;\n\n    mapping(address => mapping(address => uint128)) internal poolToTokenIndex;\n    mapping(address => mapping(address => address[])) internal tokensToPools;\n\n    constructor(\n        string memory _name,\n        address _vault,\n        address[] memory _pools,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        vault = _vault;\n        addPools(_pools);\n    }\n\n    function addPools(address[] memory _pools) public onlyMaintainer {\n        for (uint128 i = 0; i < _pools.length; i++) {\n            address pool = _pools[i];\n            bytes32 poolId = IBasePool(pool).getPoolId();\n            (IERC20[] memory tokens, , ) = IVault(vault).getPoolTokens(poolId);\n            for (uint128 j = 0; j < tokens.length; j++) {\n                address token = address(tokens[j]);\n                poolToTokenIndex[pool][token] = j;\n                for (uint128 k = 0; k < tokens.length; k++) {\n                    if (j != k) {\n                        tokensToPools[token][address(tokens[k])].push(pool);\n                        _approveIfNeeded(token, UINT_MAX);\n                    }\n                }\n            }\n        }\n    }\n\n    function removePools(address[] memory _pools) public onlyMaintainer {\n        for (uint256 i = 0; i < _pools.length; i++) {\n            address pool = _pools[i];\n            bytes32 poolId = IBasePool(pool).getPoolId();\n            (IERC20[] memory tokens, , ) = IVault(vault).getPoolTokens(poolId);\n            for (uint128 j = 0; j < tokens.length; j++) {\n                address token = address(tokens[j]);\n                for (uint128 k = 0; k < tokens.length; k++) {\n                    if (j != k) {\n                        address[] memory currentPools = tokensToPools[token][address(tokens[k])];\n                        for (uint128 l = 0; l < currentPools.length; l++) {\n                            if (currentPools[l] == pool) {\n                                delete currentPools[l];\n                            }\n                        }\n                        tokensToPools[token][address(tokens[k])] = currentPools;\n                    }\n                }\n            }\n        }\n    }\n\n    function getPools(address tokenIn, address tokenOut) public view returns (address[] memory) {\n        return tokensToPools[tokenIn][tokenOut];\n    }\n\n    function _approveIfNeeded(address _tokenIn, uint256 _amount) internal {\n        uint256 allowance = IERC20(_tokenIn).allowance(address(this), vault);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).safeApprove(vault, _amount);\n        }\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (_amountIn == 0 || _tokenIn == _tokenOut) {\n            return 0;\n        }\n\n        address[] memory pools = getPools(_tokenIn, _tokenOut);\n        if (pools.length == 0) {\n            return 0;\n        }\n\n        (, uint256 amountOut) = _getBestPoolForSwap(pools, _tokenIn, _tokenOut, _amountIn);\n        return amountOut;\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal override {\n        address[] memory pools = getPools(_tokenIn, _tokenOut);\n\n        require(pools.length > 0, \"No pools for swapping\");\n\n        (address pool, ) = _getBestPoolForSwap(pools, _tokenIn, _tokenOut, _amountIn);\n\n        require(pool != address(0), \"Undefined pool\");\n\n        IVault.SingleSwap memory swap;\n        swap.poolId = IBasePool(pool).getPoolId();\n        swap.kind = IVault.SwapKind.GIVEN_IN;\n        swap.assetIn = _tokenIn;\n        swap.assetOut = _tokenOut;\n        swap.amount = _amountIn;\n        swap.userData = \"0x\";\n\n        IVault.FundManagement memory fund;\n        fund.sender = address(this);\n        fund.recipient = payable(to);\n        fund.fromInternalBalance = false;\n        fund.toInternalBalance = false;\n\n        IVault(vault).swap(swap, fund, _amountOut, block.timestamp);\n    }\n\n    function _getBestPoolForSwap(\n        address[] memory pools,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) internal view returns (address bestPool, uint256 amountOut) {\n        amountOut = 0;\n        bestPool = address(0);\n        for (uint128 i; i < pools.length; i++) {\n            address pool = pools[i];\n            if (pool == address(0)) {\n                continue;\n            }\n            IPoolSwapStructs.SwapRequest memory request;\n            request.poolId = IBasePool(pool).getPoolId();\n            request.kind = IVault.SwapKind.GIVEN_IN;\n            request.tokenIn = IERC20(_tokenIn);\n            request.tokenOut = IERC20(_tokenOut);\n            request.amount = _amountIn;\n            request.userData = \"0x\";\n            uint256 newAmountOut = _getAmountOut(request, pool);\n            if (newAmountOut > amountOut) {\n                amountOut = newAmountOut;\n                bestPool = pool;\n            }\n        }\n    }\n\n    function _getAmountOut(IPoolSwapStructs.SwapRequest memory request, address pool)\n        internal\n        view\n        returns (uint256 amountOut)\n    {\n        // Based on https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/vault/contracts/Swaps.sol#L275\n        (, uint256[] memory balances, ) = IVault(vault).getPoolTokens(request.poolId);\n        uint256 tokenInTotal = balances[poolToTokenIndex[pool][address(request.tokenIn)]];\n        uint256 tokenOutTotal = balances[poolToTokenIndex[pool][address(request.tokenOut)]];\n        amountOut = _getAmountOutSafe(request, tokenInTotal, tokenOutTotal, pool);\n    }\n\n    function _getAmountOutSafe(\n        IPoolSwapStructs.SwapRequest memory request,\n        uint256 tokenInTotal,\n        uint256 tokenOutTotal,\n        address pool\n    ) internal view returns (uint256) {\n        try IMinimalSwapInfoPool(pool).onSwap(request, tokenInTotal, tokenOutTotal) returns (uint256 amountOut) {\n            return amountOut;\n        } catch {}\n    }\n}\n"
    },
    "src/contracts/adapters/BridgeMigrationAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract BridgeMigrationAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    mapping(address => bool) public isNewBridgeToken;\n\n    constructor(\n        address[] memory _newTokens,\n        address[] memory _oldTokens,\n        uint256 _swapGasEstimate\n    ) YakAdapter(\"BridgeMigrationAdapter\", _swapGasEstimate) {\n        setNewBridgeTokens(_newTokens, _oldTokens);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (isNewBridgeToken[_tokenOut] && IERC20(_tokenOut).swapSupply(_tokenIn) >= _amountIn) amountOut = _amountIn;\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        IERC20(_tokenOut).swap(_tokenIn, _amountIn);\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n\n    function setNewBridgeTokens(address[] memory _newTokens, address[] memory _oldTokens) public onlyMaintainer {\n        require(_newTokens.length == _oldTokens.length, \"Needs to be surjective\");\n        for (uint256 i; i < _newTokens.length; i++) {\n            require(IERC20(_newTokens[i]).swapSupply(_oldTokens[i]) > 0, \"Invalid combination\");\n            _approveIfNeeded(_newTokens[i], _oldTokens[i]);\n            isNewBridgeToken[_newTokens[i]] = true;\n        }\n    }\n\n    function _approveIfNeeded(address _newToken, address _oldToken) internal {\n        uint256 allowance = IERC20(_oldToken).allowance(address(this), _newToken);\n        if (allowance < UINT_MAX) IERC20(_oldToken).safeApprove(_newToken, UINT_MAX);\n    }\n}\n"
    },
    "src/contracts/adapters/CamelotAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ninterface IFactory {\n    function getPair(address,address) external view returns (address);\n}\n\ninterface IPair {\n    function getAmountOut(uint256, address) external view returns (uint256);\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data,\n        address referrer\n    ) external;\n}\n\ncontract CamelotAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address immutable FACTORY;\n    address referrer;\n\n    constructor(\n        string memory _name,\n        address _factory,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        FACTORY = _factory;\n    }\n\n    function setReferrer(address _referrer) public onlyMaintainer {\n        referrer = _referrer;\n    } \n\n    function getQuoteAndPair(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256 amountOut, address pair) {\n        pair = IFactory(FACTORY).getPair(_tokenIn, _tokenOut);\n        if (pair != address(0))\n            amountOut = IPair(pair).getAmountOut(_amountIn, _tokenIn);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_tokenIn != _tokenOut && _amountIn != 0)\n            (amountOut, ) = getQuoteAndPair(_amountIn, _tokenIn, _tokenOut);\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal override {\n        (uint256 amountOut, address pair) = getQuoteAndPair(_amountIn, _tokenIn, _tokenOut);\n        require(amountOut >= _amountOut, \"Insufficent amount out\");\n        (uint256 amount0Out, uint256 amount1Out) = (_tokenIn < _tokenOut)\n            ? (uint256(0), amountOut)\n            : (amountOut, uint256(0));\n        IERC20(_tokenIn).safeTransfer(pair, _amountIn);\n        IPair(pair).swap(amount0Out, amount1Out, to, new bytes(0), referrer);\n    }\n}\n"
    },
    "src/contracts/adapters/Curve1Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// Supports Curve Atricrypto pools and alike\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ICurve1.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract Curve1Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    mapping(address => uint256) public tokenIndex;\n    mapping(address => bool) public isPoolToken;\n    address public pool;\n\n    constructor(\n        string memory _name,\n        address _pool,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        pool = _pool;\n        _setPoolTokens();\n    }\n\n    // Mapping indicator which tokens are included in the pool\n    function _setPoolTokens() internal {\n        for (uint256 i = 0; true; ++i) {\n            try ICurve1(pool).underlying_coins(i) returns (address token) {\n                _setPoolTokenAllowance(token);\n                isPoolToken[token] = true;\n                tokenIndex[token] = i;\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function _setPoolTokenAllowance(address _token) internal {\n        IERC20(_token).approve(pool, UINT_MAX);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (_amountIn == 0 || _tokenIn == _tokenOut || !isPoolToken[_tokenIn] || !isPoolToken[_tokenOut]) {\n            return 0;\n        }\n        try ICurve1(pool).get_dy_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            return _applyError(amountOut);\n        } catch {\n            return 0;\n        }\n    }\n\n    function _applyError(uint256 _amount) internal pure returns (uint256) {\n        // `calc_token_amount` in base_pool is used in part of the query\n        // this method does account for deposit fee which causes discrepancy\n        // between the query result and the actual swap amount by few bps(0-3.2)\n        // Additionally there is a rounding error (swap and query may calc different amounts)\n        // Account for above with 4 bps discount\n        return _amount == 0 ? 0 : (_amount * (1e4 - 4)) / 1e4;\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        ICurve1(pool).exchange_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn, _amountOut);\n        uint256 balThis = IERC20(_tokenOut).balanceOf(address(this));\n        _returnTo(_tokenOut, balThis, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/Curve2Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// Supports Curve AAVE and Ren pool and alike\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ICurve2.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract Curve2Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    uint256 constant BPS_DEN = 1e4;\n    uint256 constant MAX_ERR_BPS = 1;\n\n    mapping(address => bool) public isPoolToken;\n    mapping(address => int128) public tokenIndex;\n    address public pool;\n\n    constructor(\n        string memory _name,\n        address _pool,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        pool = _pool;\n        _setPoolTokens();\n    }\n\n    // Mapping indicator which tokens are included in the pool\n    function _setPoolTokens() internal {\n        for (uint256 i = 0; true; i++) {\n            try ICurve2(pool).underlying_coins(i) returns (address token) {\n                _setPoolTokenAllowance(token);\n                isPoolToken[token] = true;\n                tokenIndex[token] = int128(int256(i));\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function _setPoolTokenAllowance(address _token) internal {\n        IERC20(_token).approve(pool, UINT_MAX);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (_amountIn == 0 || _tokenIn == _tokenOut || !isPoolToken[_tokenIn] || !isPoolToken[_tokenOut]) {\n            return 0;\n        }\n        try ICurve2(pool).get_dy_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            return _applyErr(amountOut);\n        } catch {\n            return 0;\n        }\n    }\n\n    function _applyErr(uint256 x) internal pure returns (uint256) {\n        return (x * (BPS_DEN - MAX_ERR_BPS)) / BPS_DEN;\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        ICurve2(pool).exchange_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn, 0);\n        uint256 balThis = IERC20(_tokenOut).balanceOf(address(this));\n        require(balThis >= _amountOut, \"Insufficient amount out\");\n        _returnTo(_tokenOut, balThis, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/CurveMetaAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ICurveMeta.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract CurveMetaAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public immutable POOL;\n    address public immutable COIN;\n    mapping(address => int128) public tokenIndex;\n    mapping(address => bool) public isPoolToken;\n\n    constructor(\n        string memory _name,\n        address _pool,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        POOL = _pool;\n        COIN = _setPoolTokens(_pool);\n    }\n\n    function _setPoolTokens(address _pool) internal returns (address coin0) {\n        coin0 = ICurveMeta(_pool).coins(0);\n        _approveToken(_pool, coin0, 0);\n        for (uint256 i = 0; true; i++) {\n            try ICurveMeta(_pool).base_coins(i) returns (address token) {\n                _approveToken(_pool, token, int128(int256(i)) + 1);\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function _approveToken(\n        address _pool,\n        address _token,\n        int128 _index\n    ) internal {\n        IERC20(_token).safeApprove(_pool, UINT_MAX);\n        tokenIndex[_token] = _index;\n        isPoolToken[_token] = true;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (\n            _amountIn == 0 ||\n            _tokenIn == _tokenOut ||\n            !((_tokenIn == COIN && isPoolToken[_tokenOut]) || (_tokenOut == COIN && isPoolToken[_tokenIn]))\n        ) {\n            return 0;\n        }\n        try ICurveMeta(POOL).get_dy_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            // `calc_token_amount` in base_pool is used in part of the query\n            // this method does account for deposit fee which causes discrepancy\n            // between the query result and the actual swap amount by few bps(0-3.2)\n            // Additionally there is a rounding error (swap and query may calc different amounts)\n            // Account for that with 1 bps discount\n            return amountOut == 0 ? 0 : (amountOut * (1e4 - 1)) / 1e4;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        ICurveMeta(POOL).exchange_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn, _amountOut);\n        _returnTo(_tokenOut, IERC20(_tokenOut).balanceOf(address(this)), _to);\n    }\n}\n"
    },
    "src/contracts/adapters/CurveMetaV2Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ninterface IMetaPool {\n    function get_dy_underlying(\n        int128,\n        int128,\n        uint256\n    ) external view returns (uint256);\n\n    function exchange_underlying(\n        int128,\n        int128,\n        uint256,\n        uint256\n    ) external;\n\n    function coins(uint256) external view returns (address);\n}\n\ninterface IBasePool {\n    function coins(uint256) external view returns (address);\n}\n\ncontract CurveMetaV2Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public immutable META_COIN;\n    address public immutable POOL;\n    mapping(address => int128) public tokenIndex;\n    mapping(address => bool) public isPoolToken;\n\n    constructor(\n        string memory _name,\n        address _pool,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        address metaCoin = getMetaCoin(_pool);\n        approveAndAddTokenToAdapter(_pool, metaCoin, 0);\n        addUnderlyingTkns(_pool);\n        META_COIN = metaCoin;\n        POOL = _pool;\n    }\n\n    function getMetaCoin(address _pool) internal view returns (address) {\n        return IMetaPool(_pool).coins(0);\n    }\n\n    function initPoolAndReturnMetaTkn(address _pool) internal returns (address coin0) {\n        coin0 = IMetaPool(_pool).coins(0);\n        approveAndAddTokenToAdapter(_pool, coin0, 0);\n    }\n\n    function addUnderlyingTkns(address metaPool) internal {\n        address basePool = IMetaPool(metaPool).coins(1);\n        for (uint256 i; true; ++i) {\n            address token = getUnderlyingToken(basePool, i);\n            if (token == address(0)) break;\n            approveAndAddTokenToAdapter(metaPool, token, int128(int256(i)) + 1);\n        }\n    }\n\n    function getUnderlyingToken(address basePool, uint256 i) internal view returns (address) {\n        try IBasePool(basePool).coins(i) returns (address token) {\n            return token;\n        } catch {}\n    }\n\n    function approveAndAddTokenToAdapter(\n        address _pool,\n        address _token,\n        int128 _index\n    ) internal {\n        IERC20(_token).safeApprove(_pool, UINT_MAX);\n        tokenIndex[_token] = _index;\n        isPoolToken[_token] = true;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (!validInputParams(_amountIn, _tokenIn, _tokenOut)) return 0;\n        // `calc_token_amount` in base_pool is used in part of the query\n        // this method does account for deposit fee which causes discrepancy\n        // between the query result and the actual swap amount by few bps(0-3.2)\n        // Additionally there is a rounding error (swap and query may calc different amounts)\n        // Account for that with 1 bps discount\n        uint256 amountOut = safeQuery(_amountIn, _tokenIn, _tokenOut);\n        return (amountOut * (1e4 - 1)) / 1e4;\n    }\n\n    function safeQuery(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256) {\n        try IMetaPool(POOL).get_dy_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function validInputParams(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (bool) {\n        return _amountIn != 0 && _tokenIn != _tokenOut && validPath(_tokenIn, _tokenOut);\n    }\n\n    function validPath(address tkn0, address tkn1) internal view returns (bool) {\n        return (tkn0 == META_COIN && isPoolToken[tkn1]) || (tkn1 == META_COIN && isPoolToken[tkn0]);\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        IMetaPool(POOL).exchange_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn, _amountOut);\n        uint256 balThis = IERC20(_tokenOut).balanceOf(address(this));\n        _returnTo(_tokenOut, balThis, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/CurveMetaV3Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ninterface IMetaPool {\n    function get_dy_underlying(\n        int128,\n        int128,\n        uint256\n    ) external view returns (uint256);\n\n    function exchange_underlying(\n        int128,\n        int128,\n        uint256,\n        uint256\n    ) external;\n\n    function coins(uint256) external view returns (address);\n}\n\ninterface IBasePool {\n    function coins(uint256) external view returns (address);\n}\n\ncontract CurveMetaV3Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    mapping(address => mapping(address => int128)) public tokenIndexForPool;\n    mapping(address => mapping(address => address)) public poolForTokens;\n\n    constructor(\n        string memory _name,\n        address[] memory _pools,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        setPools(_pools);\n    }\n\n    function getPool(address tkn0, address tkn1) public view returns (address) {\n        return poolForTokens[tkn0][tkn1];\n    }\n\n    function rmPools(address[] memory _pools) external onlyMaintainer {\n        for (uint256 i; i < _pools.length; ++i) _rmPool(_pools[i]);\n    }\n\n    function setPools(address[] memory _pools) public onlyMaintainer {\n        for (uint256 i; i < _pools.length; ++i) _setPool(_pools[i]);\n    }\n\n    function _setPool(address _pool) internal {\n        (address mToken, address basePool) = getCoins(_pool);\n        IERC20(mToken).safeApprove(_pool, UINT_MAX);\n        for (uint256 i; true; ++i) {\n            address uToken = getUnderlyingToken(basePool, i);\n            if (uToken == address(0)) break;\n            _setTokenPair(_pool, mToken, uToken, int128(int256(i)));\n        }\n    }\n\n    function _rmPool(address _pool) internal {\n        (address mToken, address basePool) = getCoins(_pool);\n        for (uint256 i; true; ++i) {\n            address uToken = getUnderlyingToken(basePool, i);\n            if (uToken == address(0)) break;\n            poolForTokens[uToken][mToken] = address(0);\n            poolForTokens[mToken][uToken] = address(0);\n        }\n    }\n\n    function getCoins(address _pool) internal view returns (address meta, address base) {\n        meta = IMetaPool(_pool).coins(0);\n        base = IMetaPool(_pool).coins(1);\n    }\n\n    function _setTokenPair(\n        address _pool,\n        address _metaTkn,\n        address _uToken,\n        int128 _index\n    ) internal {\n        IERC20(_uToken).safeApprove(_pool, UINT_MAX);\n        tokenIndexForPool[_pool][_uToken] = _index + 1;\n        poolForTokens[_uToken][_metaTkn] = _pool;\n        poolForTokens[_metaTkn][_uToken] = _pool;\n    }\n\n    function getUnderlyingToken(address basePool, uint256 i) internal view returns (address) {\n        try IBasePool(basePool).coins(i) returns (address token) {\n            return token;\n        } catch {}\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        address pool = getPool(_tokenIn, _tokenOut);\n        if (pool == address(0) || _amountIn == 0) return 0;\n        // `calc_token_amount` in base_pool is used in part of the query\n        // this method does account for deposit fee which causes discrepancy\n        // between the query result and the actual swap amount by few bps(0-3.2)\n        // Additionally there is a rounding error (swap and query may calc different amounts)\n        // Account for that with 1 bps discount\n        uint256 amountOut = safeQuery(pool, _amountIn, _tokenIn, _tokenOut);\n        return (amountOut * (1e4 - 1)) / 1e4;\n    }\n\n    function safeQuery(\n        address _pool,\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256) {\n        try\n            IMetaPool(_pool).get_dy_underlying(\n                tokenIndexForPool[_pool][_tokenIn],\n                tokenIndexForPool[_pool][_tokenOut],\n                _amountIn\n            )\n        returns (uint256 amountOut) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        address pool = getPool(_tokenIn, _tokenOut);\n        IMetaPool(pool).exchange_underlying(\n            tokenIndexForPool[pool][_tokenIn],\n            tokenIndexForPool[pool][_tokenOut],\n            _amountIn,\n            _amountOut\n        );\n        uint256 balThis = IERC20(_tokenOut).balanceOf(address(this));\n        _returnTo(_tokenOut, balThis, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/CurveMetaWithSwapperAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// Supports Curve MIM pool (manually enter base tokens)\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ICurveMeta.sol\";\nimport \"../interface/ICurve2.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ninterface ICurveSwapper128 {\n    function exchange_underlying(\n        address pool,\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n}\n\ncontract CurveMetaWithSwapperAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public immutable metaPool;\n    address public immutable basePool;\n    address public immutable swapper;\n    address public immutable metaTkn;\n    mapping(address => int128) public tokenIndex;\n    mapping(address => bool) public isPoolToken;\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        address _metaPool,\n        address _basePool,\n        address _swapper\n    ) YakAdapter(_name, _swapGasEstimate) {\n        metaTkn = setMetaTkn(_metaPool, _swapper);\n        metaPool = _metaPool;\n        basePool = _basePool;\n        swapper = _swapper;\n        _setUnderlyingTokens(_basePool, _swapper);\n    }\n\n    // Mapping indicator which tokens are included in the pool\n    function _setUnderlyingTokens(address _basePool, address _swapper) internal {\n        for (uint256 i = 0; true; i++) {\n            try ICurve2(_basePool).underlying_coins(i) returns (address token) {\n                _setPoolTokenAllowance(token, _swapper);\n                isPoolToken[token] = true;\n                tokenIndex[token] = int128(int256(i)) + 1;\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function setMetaTkn(address _metaPool, address _swapper) internal returns (address _metaTkn) {\n        _metaTkn = ICurveMeta(_metaPool).coins(0);\n        _setPoolTokenAllowance(_metaTkn, _swapper);\n        isPoolToken[_metaTkn] = true;\n        tokenIndex[_metaTkn] = 0;\n    }\n\n    function _setPoolTokenAllowance(address _token, address _target) internal {\n        IERC20(_token).approve(_target, UINT_MAX);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (!validInputParams(_amountIn, _tokenIn, _tokenOut)) {\n            return 0;\n        }\n        try ICurveMeta(metaPool).get_dy_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            // `calc_token_amount` in base_pool is used in part of the query\n            // this method does account for deposit fee which causes discrepancy\n            // between the query result and the actual swap amount by few bps(0-3.2)\n            // Additionally there is a rounding error (swap and query may calc different amounts)\n            // Account for that with 4 bps discount\n            return amountOut == 0 ? 0 : (amountOut * (1e4 - 4)) / 1e4;\n        } catch {\n            return 0;\n        }\n    }\n\n    function validInputParams(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (bool) {\n        return _amountIn != 0 && _tokenIn != _tokenOut && validPath(_tokenIn, _tokenOut);\n    }\n\n    function validPath(address tkn0, address tkn1) internal view returns (bool) {\n        return (tkn0 == metaTkn && isPoolToken[tkn1]) || (tkn1 == metaTkn && isPoolToken[tkn0]);\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        ICurveSwapper128(swapper).exchange_underlying(\n            metaPool,\n            tokenIndex[_tokenIn],\n            tokenIndex[_tokenOut],\n            _amountIn,\n            0\n        );\n        uint256 balThis = IERC20(_tokenOut).balanceOf(address(this));\n        require(balThis >= _amountOut, \"Insufficient amount-out\");\n        _returnTo(_tokenOut, balThis, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/CurvePlain128Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ICurvePlain128.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract CurvePlain128Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public immutable POOL;\n    mapping(address => int128) public tokenIndex;\n    mapping(address => bool) public isPoolToken;\n\n    constructor(\n        string memory _name,\n        address _pool,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        POOL = _pool;\n        _setPoolTokens(_pool);\n    }\n\n    // Mapping indicator which tokens are included in the pool\n    function _setPoolTokens(address _pool) internal {\n        for (uint256 i = 0; true; i++) {\n            try ICurvePlain128(_pool).coins(i) returns (address token) {\n                _approveToken(_pool, token, int128(int256(i)));\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function _approveToken(\n        address _pool,\n        address _token,\n        int128 _index\n    ) internal {\n        IERC20(_token).safeApprove(_pool, UINT_MAX);\n        tokenIndex[_token] = _index;\n        isPoolToken[_token] = true;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (!_validArgs(_amountIn, _tokenIn, _tokenOut)) return 0;\n        uint256 amountOut = _getDySafe(_amountIn, _tokenIn, _tokenOut);\n        // Account for possible rounding error\n        return amountOut > 0 ? amountOut - 1 : 0;\n    }\n\n    function _validArgs(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (bool) {\n        return _amountIn != 0 && _tokenIn != _tokenOut && isPoolToken[_tokenIn] && isPoolToken[_tokenOut];\n    }\n\n    function _getDySafe(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256) {\n        try ICurvePlain128(POOL).get_dy(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        ICurvePlain128(POOL).exchange(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn, _amountOut);\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/CurvePlain128NativeAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ICurvePlain128Native.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../interface/IWETH.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\n\ncontract CurvePlain128NativeAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address constant NATIVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address immutable WNATIVE;\n    address public immutable POOL;\n    mapping(address => int128) public tokenIndex;\n    mapping(address => bool) public isPoolToken;\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        address _pool,\n        address _wNative\n    ) YakAdapter(_name, _swapGasEstimate) {\n        IERC20(_wNative).safeApprove(_wNative, UINT_MAX);\n        _setPoolTokens(_pool, _wNative);\n        WNATIVE = _wNative;\n        POOL = _pool;\n    }\n\n    // Mapping indicator which tokens are included in the pool\n    function _setPoolTokens(address _pool, address _wNative) internal {\n        for (uint256 i = 0; true; i++) {\n            try ICurvePlain128Native(_pool).coins(i) returns (address token) {\n                _addTokenToPool(_pool, token, int128(int256(i)), _wNative);\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function _addTokenToPool(\n        address _pool,\n        address _token,\n        int128 _index, \n        address _wNative\n    ) internal {\n        if (_token != NATIVE) {\n            IERC20(_token).safeApprove(_pool, UINT_MAX);\n        } else {\n            _token = _wNative;\n        }\n        tokenIndex[_token] = _index;\n        isPoolToken[_token] = true;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (!_validArgs(_amountIn, _tokenIn, _tokenOut)) return 0;\n        uint256 amountOut = _getDySafe(_amountIn, _tokenIn, _tokenOut);\n        // Account for possible rounding error\n        return amountOut > 0 ? amountOut - 1 : 0;\n    }\n\n    function _validArgs(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (bool) {\n        return _amountIn != 0 && \n            _tokenIn != _tokenOut && \n            isPoolToken[_tokenIn] && \n            isPoolToken[_tokenOut];\n    }\n\n    function _getDySafe(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256) {\n        try ICurvePlain128Native(POOL).get_dy(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        uint256 transferVal;\n        if (_tokenIn == WNATIVE) {\n            transferVal = _amountIn;\n            IWETH(WNATIVE).withdraw(_amountIn);\n        }\n        uint256 dy = ICurvePlain128Native(POOL).exchange{ value: transferVal }(\n            tokenIndex[_tokenIn], \n            tokenIndex[_tokenOut], \n            _amountIn, \n            _amountOut\n        );\n        if (_tokenOut == WNATIVE) {\n            IWETH(WNATIVE).deposit{ value: dy }();\n        }\n        _returnTo(_tokenOut, dy, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/CurvePlain256Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ICurvePlain256.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract CurvePlain256Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public immutable POOL;\n    mapping(address => uint256) public tokenIndex;\n    mapping(address => bool) public isPoolToken;\n\n    constructor(\n        string memory _name,\n        address _pool,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        name = _name;\n        POOL = _pool;\n        _setPoolTokens(_pool);\n        setSwapGasEstimate(_swapGasEstimate);\n    }\n\n    function _setPoolTokens(address _pool) internal {\n        for (uint256 i = 0; true; i++) {\n            address token = _getCoinByIndexSafe(_pool, i);\n            if (token == address(0)) break;\n            _addToken(_pool, token, i);\n        }\n    }\n\n    function _getCoinByIndexSafe(address _pool, uint256 _index) internal view returns (address token) {\n        try ICurvePlain256(_pool).coins(_index) returns (address _token) {\n            token = _token;\n        } catch {}\n    }\n\n    function _addToken(\n        address _pool,\n        address _token,\n        uint256 _index\n    ) internal {\n        IERC20(_token).safeApprove(_pool, UINT_MAX);\n        tokenIndex[_token] = _index;\n        isPoolToken[_token] = true;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (!_validArgs(_amountIn, _tokenIn, _tokenOut)) return 0;\n        uint256 amountOut = _getDySafe(_amountIn, _tokenIn, _tokenOut);\n        // Account for possible rounding error\n        return amountOut > 0 ? amountOut - 1 : 0;\n    }\n\n    function _validArgs(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (bool) {\n        return _amountIn != 0 && _tokenIn != _tokenOut && isPoolToken[_tokenIn] && isPoolToken[_tokenOut];\n    }\n\n    function _getDySafe(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256) {\n        try ICurvePlain256(POOL).get_dy(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        ICurvePlain256(POOL).exchange(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn, _amountOut);\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/DodoV1Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IDodoV1.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract DodoV1Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public immutable HELPER;\n    mapping(address => mapping(address => address)) tknsToPool; // base > quote > pool\n\n    constructor(\n        string memory _name,\n        address[] memory _pools,\n        address _helper,\n        uint256 _gasEstimate\n    ) YakAdapter(_name, _gasEstimate) {\n        _setPools(_pools, true);\n        HELPER = _helper;\n    }\n\n    function setPools(address[] memory _pools, bool overwrite) external onlyMaintainer {\n        _setPools(_pools, overwrite);\n    }\n\n    function _rmPools(address[] memory _pools) external onlyMaintainer {\n        for (uint256 i; i < _pools.length; ++i) {\n            (address baseTkn, address quoteTkn) = _getTknsForPool(_pools[i]);\n            tknsToPool[baseTkn][quoteTkn] = address(0);\n        }\n    }\n\n    function _setPools(address[] memory _pools, bool overwrite) internal {\n        for (uint256 i; i < _pools.length; ++i) _setPool(_pools[i], overwrite);\n    }\n\n    function _setPool(address _pool, bool overwrite) internal {\n        (address baseTkn, address quoteTkn) = _getTknsForPool(_pool);\n        if (!overwrite) _overwriteCheck(baseTkn, quoteTkn, _pool);\n        _approveTknsForPool(baseTkn, quoteTkn, _pool);\n        tknsToPool[baseTkn][quoteTkn] = _pool;\n    }\n\n    function _getTknsForPool(address _pool) internal view returns (address baseToken, address quoteToken) {\n        baseToken = IDodoV1(_pool)._BASE_TOKEN_();\n        quoteToken = IDodoV1(_pool)._QUOTE_TOKEN_();\n    }\n\n    function _overwriteCheck(\n        address baseTkn,\n        address quoteTkn,\n        address pool\n    ) internal view {\n        address existingPool = tknsToPool[baseTkn][quoteTkn];\n        require(existingPool == address(0) || existingPool == pool, \"Not allowed to overwrite\");\n    }\n\n    function _approveTknsForPool(\n        address _baseTkn,\n        address _quoteTkn,\n        address _pool\n    ) internal {\n        IERC20(_baseTkn).safeApprove(_pool, UINT_MAX);\n        IERC20(_quoteTkn).safeApprove(_pool, UINT_MAX);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (_amountIn == 0) return 0;\n        address pool = tknsToPool[_tokenIn][_tokenOut];\n        if (pool != address(0)) return IDodoV1(pool).querySellBaseToken(_amountIn);\n        pool = tknsToPool[_tokenOut][_tokenIn];\n        if (pool != address(0)) return IDodoHelper(HELPER).querySellQuoteToken(pool, _amountIn);\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        address pool = tknsToPool[_tokenIn][_tokenOut];\n        if (pool != address(0)) IDodoV1(pool).sellBaseToken(_amountIn, _amountOut, \"\");\n        pool = tknsToPool[_tokenOut][_tokenIn];\n        if (pool != address(0)) IDodoV1(pool).buyBaseToken(_amountOut, _amountIn, \"\");\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/DodoV2Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IDodoV2.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract DodoV2Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    mapping(address => mapping(address => address)) public tknsToPool; // base > quote > pool\n\n    constructor(\n        string memory _name,\n        address[] memory _pools,\n        uint256 _gasEstimate\n    ) YakAdapter(_name, _gasEstimate) {\n        _setPools(_pools, true);\n    }\n\n    function setPools(address[] memory _pools, bool overwrite) external onlyMaintainer {\n        _setPools(_pools, overwrite);\n    }\n\n    function _rmPools(address[] memory _pools) external onlyMaintainer {\n        for (uint256 i; i < _pools.length; ++i) {\n            (address baseTkn, address quoteTkn) = _getTknsForPool(_pools[i]);\n            tknsToPool[baseTkn][quoteTkn] = address(0);\n        }\n    }\n\n    function _setPools(address[] memory _pools, bool overwrite) internal {\n        for (uint256 i; i < _pools.length; ++i) _setPool(_pools[i], overwrite);\n    }\n\n    function _setPool(address _pool, bool overwrite) internal {\n        (address baseTkn, address quoteTkn) = _getTknsForPool(_pool);\n        if (!overwrite) _overwriteCheck(baseTkn, quoteTkn, _pool);\n        tknsToPool[baseTkn][quoteTkn] = _pool;\n    }\n\n    function _getTknsForPool(address _pool) internal view returns (address baseToken, address quoteToken) {\n        baseToken = IDodoV2(_pool)._BASE_TOKEN_();\n        quoteToken = IDodoV2(_pool)._QUOTE_TOKEN_();\n    }\n\n    function _overwriteCheck(\n        address baseTkn,\n        address quoteTkn,\n        address pool\n    ) internal view {\n        address existingPool = tknsToPool[baseTkn][quoteTkn];\n        require(existingPool == address(0) || existingPool == pool, \"Not allowed to overwrite\");\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 returnAmount) {\n        if (_amountIn == 0) return 0;\n        address pool = tknsToPool[_tokenIn][_tokenOut];\n        if (pool != address(0)) return IDodoV2(pool).querySellBase(address(this), _amountIn);\n        pool = tknsToPool[_tokenOut][_tokenIn];\n        if (pool != address(0)) return IDodoV2(pool).querySellQuote(address(this), _amountIn);\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        uint256 returned = _dodoSwap(_amountIn, _tokenIn, _tokenOut);\n        require(returned >= _amountOut, \"Insufficient amount-out\");\n        _returnTo(_tokenOut, returned, _to);\n    }\n\n    function _dodoSwap(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal returns (uint256) {\n        (function(address) external returns (uint256) fn, address pool) = _getPoolAndSwapFn(_tokenIn, _tokenOut);\n        IERC20(_tokenIn).safeTransfer(pool, _amountIn);\n        return fn(address(this));\n    }\n\n    function _getPoolAndSwapFn(address _tokenIn, address _tokenOut)\n        internal\n        view\n        returns (function(address) external returns (uint256), address)\n    {\n        address pool = tknsToPool[_tokenIn][_tokenOut];\n        if (pool != address(0)) return (IDodoV2(pool).sellBase, pool);\n        pool = tknsToPool[_tokenOut][_tokenIn];\n        if (pool != address(0)) return (IDodoV2(pool).sellQuote, pool);\n        revert(\"Token pair not supported\");\n    }\n}\n"
    },
    "src/contracts/adapters/DxSwapAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IUniswapFactory.sol\";\nimport \"../interface/IUniswapPair.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ninterface IDxSwapPair is IUniswapPair {\n    function swapFee() external view returns (uint256);\n}\n\ncontract DxSwapAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    uint256 internal constant FEE_DENOMINATOR = 1e4;\n    address public immutable FACTORY;\n\n    constructor(\n        string memory _name,\n        address _factory,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        FACTORY = _factory;\n    }\n\n    function _getAmountOut(\n        uint256 _amountIn,\n        uint256 _reserveIn,\n        uint256 _reserveOut,\n        uint256 _fee\n    ) internal pure returns (uint256 amountOut) {\n        uint256 feeCompliment = FEE_DENOMINATOR - _fee;\n        uint256 amountInWithFee = _amountIn * feeCompliment;\n        uint256 numerator = amountInWithFee * _reserveOut;\n        uint256 denominator = _reserveIn * FEE_DENOMINATOR + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (_tokenIn == _tokenOut || _amountIn == 0) {\n            return 0;\n        }\n        address pair = IUniswapFactory(FACTORY).getPair(_tokenIn, _tokenOut);\n        if (pair == address(0)) {\n            return 0;\n        }\n        (uint256 r0, uint256 r1, ) = IUniswapPair(pair).getReserves();\n        (uint256 reserveIn, uint256 reserveOut) = _tokenIn < _tokenOut ? (r0, r1) : (r1, r0);\n        if (reserveIn > 0 && reserveOut > 0) {\n            uint256 fee = IDxSwapPair(pair).swapFee();\n            return _getAmountOut(_amountIn, reserveIn, reserveOut, fee);\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal override {\n        address pair = IUniswapFactory(FACTORY).getPair(_tokenIn, _tokenOut);\n        (uint256 amount0Out, uint256 amount1Out) = (_tokenIn < _tokenOut)\n            ? (uint256(0), _amountOut)\n            : (_amountOut, uint256(0));\n        IERC20(_tokenIn).safeTransfer(pair, _amountIn);\n        IUniswapPair(pair).swap(amount0Out, amount1Out, to, new bytes(0));\n    }\n}\n"
    },
    "src/contracts/adapters/FusionAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./UniswapV3AdapterBase.sol\";\n\ncontract FusionAdapter is UniswapV3AdapterBase {\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        uint256 _quoterGasLimit,\n        address _quoter,\n        address _factory,\n        uint24[] memory _defaultFees\n    ) UniswapV3AdapterBase(_name, _swapGasEstimate, _quoterGasLimit, _quoter, _factory, _defaultFees) {\n    }\n\n    function fusionXV3SwapCallback (\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata\n    ) external {\n        if (amount0Delta > 0) {\n            IERC20(IUniV3Pool(msg.sender).token0()).transfer(msg.sender, uint256(amount0Delta));\n        } else {\n            IERC20(IUniV3Pool(msg.sender).token1()).transfer(msg.sender, uint256(amount1Delta));\n        }\n    }\n}\n"
    },
    "src/contracts/adapters/GeodeWPAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IGeodePortal.sol\";\nimport \"../interface/IGeodeWP.sol\";\nimport \"../interface/IgAVAX.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../interface/IWETH.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract GeodeWPAdapter is YakAdapter {\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n    uint256 internal constant gAVAX_DENOMINATOR = 1e18;\n    uint256 internal constant IGNORABLE_DEBT = 1e18;\n    uint256 public immutable pooledTknId;\n    address public immutable portal;\n    address public immutable gavax;\n    address public immutable pool;\n    address public pooledTknInterface;\n\n    constructor(\n        string memory _name,\n        address _portal,\n        uint256 _pooledTknId,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        pooledTknInterface = IGeodePortal(_portal).planetCurrentInterface(_pooledTknId);\n        address _pool = IGeodePortal(_portal).planetWithdrawalPool(_pooledTknId);\n        address _gavax = IGeodePortal(_portal).gAVAX();\n        IgAVAX(_gavax).setApprovalForAll(_pool, true);\n        pooledTknId = _pooledTknId;\n        portal = _portal;\n        gavax = _gavax;\n        pool = _pool;\n    }\n\n    function setInterfaceForPooledTkn(address interfaceAddress) public onlyMaintainer {\n        require(IgAVAX(gavax).isInterface(interfaceAddress, pooledTknId), \"Not valid interface\");\n        pooledTknInterface = interfaceAddress;\n    }\n\n    function setGAvaxAllowance() public onlyMaintainer {\n        IgAVAX(gavax).setApprovalForAll(pool, true);\n    }\n\n    function revokeGAvaxAllowance() public onlyMaintainer {\n        IgAVAX(gavax).setApprovalForAll(pool, false);\n    }\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_amountIn == 0 || IGeodeWP(pool).paused()) {\n            amountOut = 0;\n        } else if (_tokenIn == WAVAX && _tokenOut == pooledTknInterface) {\n            amountOut = _calcSwapAndMint(_amountIn);\n        } else if (_tokenOut == WAVAX && _tokenIn == pooledTknInterface) {\n            amountOut = _calcSwap(1, 0, _amountIn);\n        }\n    }\n\n    function _calcSwapAndMint(uint256 amountIn) internal view returns (uint256) {\n        uint256 debt = IGeodeWP(pool).getDebt();\n        if (debt >= amountIn || _stakingPaused()) {\n            // If pool is unbalanced and missing avax it's cheaper to swap\n            return _calcSwap(0, 1, amountIn);\n        } else {\n            // Swap debt and mint the rest\n            uint256 amountOutBought;\n            if (debt > IGNORABLE_DEBT) {\n                amountOutBought = _calcSwap(0, 1, debt);\n                amountIn -= debt;\n            }\n            uint256 amountOutMinted = _calcMint(amountIn);\n            return amountOutBought + amountOutMinted;\n        }\n    }\n\n    function _stakingPaused() internal view returns (bool) {\n        return IGeodePortal(portal).isStakingPausedForPool(pooledTknId);\n    }\n\n    function _calcSwap(\n        uint8 tknInIndex,\n        uint8 tknOutIndex,\n        uint256 amountIn\n    ) internal view returns (uint256) {\n        try IGeodeWP(pool).calculateSwap(tknInIndex, tknOutIndex, amountIn) returns (uint256 amountOut) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _calcMint(uint256 amountIn) internal view returns (uint256) {\n        uint256 price = IgAVAX(gavax).pricePerShare(pooledTknId);\n        return (amountIn * gAVAX_DENOMINATOR) / price;\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        if (_tokenIn == WAVAX) {\n            IWETH(WAVAX).withdraw(_amountIn);\n            if (_stakingPaused()) {\n                _swapUnderlying(0, 1, _amountIn, _amountOut, _amountIn);\n            } else {\n                _geodeStake(_amountIn, _amountOut);\n            }\n        } else {\n            _swapUnderlying(1, 0, _amountIn, _amountOut, 0);\n            IWETH(WAVAX).deposit{ value: address(this).balance }();\n        }\n        uint256 balThis = IERC20(_tokenOut).balanceOf(address(this));\n        require(balThis >= _amountOut, \"Insufficient amount out\");\n        _returnTo(_tokenOut, balThis, _to);\n    }\n\n    function _swapUnderlying(\n        uint8 _tokenInIndex,\n        uint8 _tokenOutIndex,\n        uint256 _amountIn,\n        uint256 _amountOut,\n        uint256 _val\n    ) internal {\n        IGeodeWP(pool).swap{ value: _val }(_tokenInIndex, _tokenOutIndex, _amountIn, _amountOut, block.timestamp);\n    }\n\n    function _geodeStake(uint256 _amountIn, uint256 _amountOut) internal {\n        IGeodePortal(portal).stake{ value: _amountIn }(pooledTknId, _amountOut, block.timestamp);\n    }\n}\n"
    },
    "src/contracts/adapters/GGAvaxAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IGGAvax.sol\";\nimport \"../YakAdapter.sol\";\n\ninterface IWAVAX {\n    function withdraw(uint256) external;\n}\n\n/**\n * @notice WAVAX -> ggAVAX\n *\n */\ncontract GGAvaxAdapter is YakAdapter {\n    address public constant ggAVAX = 0xA25EaF2906FA1a3a13EdAc9B9657108Af7B703e3;\n    address public constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n\n    constructor(uint256 _swapGasEstimate) YakAdapter(\"GGAvaxAdapter\", _swapGasEstimate) {\n        IERC20(WAVAX).approve(ggAVAX, type(uint256).max);\n    }\n\n    function _query(uint256 _amountIn, address _tokenIn, address _tokenOut)\n        internal\n        view\n        override\n        returns (uint256 amountOut)\n    {\n        if (_tokenIn == WAVAX && _tokenOut == ggAVAX) {\n            if (_amountIn > IGGAvax(ggAVAX).maxDeposit(address(this))) return 0;\n            return IGGAvax(ggAVAX).previewDeposit(_amountIn);\n        } else if (_tokenIn == ggAVAX && _tokenOut == WAVAX) {\n            amountOut = IGGAvax(ggAVAX).previewRedeem(_amountIn);\n            uint256 totalAssets = IGGAvax(ggAVAX).totalAssets();\n            uint256 stakingTotalAssets = IGGAvax(ggAVAX).stakingTotalAssets();\n            uint256 avail = totalAssets > stakingTotalAssets ? totalAssets - stakingTotalAssets : 0;\n            return amountOut > avail ? avail : amountOut;\n        }\n    }\n\n    function _swap(uint256 _amountIn, uint256, address, address _tokenOut, address _to) internal override {\n        if (_tokenOut == ggAVAX) {\n            IGGAvax(ggAVAX).deposit(_amountIn, _to);\n        } else if (_tokenOut == WAVAX) {\n            IGGAvax(ggAVAX).redeem(_amountIn, _to, address(this));\n        }\n    }\n}\n"
    },
    "src/contracts/adapters/GmxAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport \"../interface/IGmxVault.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract GmxAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    uint256 public constant BASIS_POINTS_DIVISOR = 1e4;\n    uint256 public constant PRICE_PRECISION = 1e30;\n    uint256 public constant USDG_DECIMALS = 18;\n    address public immutable VAULT;\n    bool immutable USE_VAULT_UTILS;\n    address immutable USDG;\n    mapping(address => bool) public isPoolTkn; // unwanted tkns can be ignored by adapter\n    mapping(address => uint256) tokenDecimals;\n\n    constructor(\n        string memory _name,\n        address _vault,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        _setVaultTkns(_vault);\n        USE_VAULT_UTILS = _vaultHasUtils(_vault);\n        USDG = IGmxVault(_vault).usdg();\n        VAULT = _vault;\n    }\n\n    //                                 UTILS                                  \\\\\n\n    function addPoolTkns(address[] calldata _tokens) external onlyMaintainer {\n        for (uint256 i; i < _tokens.length; ++i) _setToken(_tokens[i]);\n    }\n\n    function rmPoolTkns(address[] calldata _tokens) external onlyMaintainer {\n        for (uint256 i; i < _tokens.length; ++i) isPoolTkn[_tokens[i]] = false;\n    }\n\n    function _setVaultTkns(address _vault) internal {\n        uint256 whitelistedTknsLen = IGmxVault(_vault).allWhitelistedTokensLength();\n        for (uint256 i = 0; i < whitelistedTknsLen; i++) {\n            address token = IGmxVault(_vault).allWhitelistedTokens(i);\n            _setToken(token);\n        }\n    }\n\n    function _setToken(address _token) internal {\n        tokenDecimals[_token] = IERC20(_token).decimals();\n        isPoolTkn[_token] = true;\n    }\n\n    function _vaultHasUtils(address _vault) internal view returns (bool) {\n        try IGmxVault(_vault).vaultUtils() {\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    //                                 QUERY                                  \\\\\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (_validArgs(_amountIn, _tokenIn, _tokenOut)) return _getAmountOut(_amountIn, _tokenIn, _tokenOut);\n    }\n\n    function _validArgs(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (bool) {\n        return\n            _amountIn != 0 &&\n            _tokenIn != _tokenOut &&\n            isPoolTkn[_tokenIn] &&\n            IGmxVault(VAULT).whitelistedTokens(_tokenIn) &&\n            IGmxVault(VAULT).whitelistedTokens(_tokenOut) &&\n            IGmxVault(VAULT).isSwapEnabled() &&\n            _hasVaultEnoughBal(_tokenIn, 1); // Prevents calc problems\n    }\n\n    function _getAmountOut(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256) {\n        (uint256 amountOut, uint256 usdgAmount) = _getGrossAmountOutAndUsdg(_amountIn, _tokenIn, _tokenOut);\n        return _calcNetAmountOut(_tokenIn, _tokenOut, amountOut, usdgAmount);\n    }\n\n    function _calcNetAmountOut(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountOut,\n        uint256 _usdgAmount\n    ) internal view returns (uint256) {\n        uint256 feeBps = _getFeeBasisPoint(_tokenIn, _tokenOut, _usdgAmount);\n        uint256 netAmountOut = _amountOutAfterFees(_amountOut, feeBps);\n        bool withinVaultLimits = _isWithinVaultLimits(_tokenIn, _tokenOut, _usdgAmount, netAmountOut);\n        if (withinVaultLimits) return netAmountOut;\n    }\n\n    function _getGrossAmountOutAndUsdg(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256 amountOut, uint256 usdgAmount) {\n        (uint256 priceIn, uint256 priceOut) = _getPrices(_tokenIn, _tokenOut);\n        amountOut = (_amountIn * priceIn) / priceOut;\n        amountOut = _adjustForDecimals(amountOut, _tokenIn, _tokenOut);\n        usdgAmount = _getUsdgAmount(_amountIn, priceIn, _tokenIn);\n    }\n\n    function _getUsdgAmount(\n        uint256 _amountIn,\n        uint256 _priceIn,\n        address _tokenIn\n    ) internal view returns (uint256 usdgAmount) {\n        usdgAmount = (_amountIn * _priceIn) / PRICE_PRECISION;\n        usdgAmount = _adjustForDecimals(usdgAmount, _tokenIn, USDG);\n    }\n\n    function _amountOutAfterFees(uint256 _amountOut, uint256 _feeBasisPoints) internal pure returns (uint256) {\n        return (_amountOut * (BASIS_POINTS_DIVISOR - _feeBasisPoints)) / BASIS_POINTS_DIVISOR;\n    }\n\n    function _adjustForDecimals(\n        uint256 _amount,\n        address _tokenDiv,\n        address _tokenMul\n    ) internal view returns (uint256) {\n        uint256 decimalsDiv = _tokenDiv == USDG ? USDG_DECIMALS : tokenDecimals[_tokenDiv];\n        uint256 decimalsMul = _tokenMul == USDG ? USDG_DECIMALS : tokenDecimals[_tokenMul];\n        return (_amount * 10**decimalsMul) / 10**decimalsDiv;\n    }\n\n    function _getPrices(address _tokenIn, address _tokenOut) internal view returns (uint256 priceIn, uint256 priceOut) {\n        IGmxVaultPriceFeed priceFeed = IGmxVault(VAULT).priceFeed();\n        priceIn = priceFeed.getPrice(_tokenIn, false, true, true);\n        priceOut = priceFeed.getPrice(_tokenOut, true, true, true);\n    }\n\n    function _hasVaultEnoughBal(address _token, uint256 _amount) private view returns (bool) {\n        return IERC20(_token).balanceOf(VAULT) >= _amount;\n    }\n\n    function _isWithinVaultLimits(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountInUsdg,\n        uint256 _amountOut\n    ) private view returns (bool) {\n        uint256 poolBalTknOut = IGmxVault(VAULT).poolAmounts(_tokenOut);\n        if (poolBalTknOut < _amountOut) return false;\n        uint256 newPoolBalTknOut = poolBalTknOut - _amountOut;\n        return\n            !reservedAmountExceeded(newPoolBalTknOut, _tokenOut) &&\n            !bufferAmountExceeded(newPoolBalTknOut, _tokenOut) &&\n            !maxDebtExceeded(_amountInUsdg, _tokenIn);\n    }\n\n    function reservedAmountExceeded(uint256 _newPoolBalTknOut, address _tokenOut) internal view returns (bool) {\n        uint256 reservedAmount = IGmxVault(VAULT).reservedAmounts(_tokenOut);\n        return _newPoolBalTknOut < reservedAmount;\n    }\n\n    function bufferAmountExceeded(uint256 _newPoolBalTknOut, address _tokenOut) internal view returns (bool) {\n        uint256 bufferAmount = IGmxVault(VAULT).bufferAmounts(_tokenOut);\n        return _newPoolBalTknOut < bufferAmount;\n    }\n\n    function maxDebtExceeded(uint256 _amountInUsdg, address _tokenIn) internal view returns (bool) {\n        uint256 maxUsdgAmount = IGmxVault(VAULT).maxUsdgAmounts(_tokenIn);\n        if (maxUsdgAmount == 0) return false;\n        uint256 newUsdgAmount = IGmxVault(VAULT).usdgAmounts(_tokenIn) + _amountInUsdg;\n        return newUsdgAmount > maxUsdgAmount;\n    }\n\n    function _getFeeBasisPoint(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 usdgAmount\n    ) internal view returns (uint256) {\n        if (USE_VAULT_UTILS)\n            return IGmxVault(VAULT).vaultUtils().getSwapFeeBasisPoints(_tokenIn, _tokenOut, usdgAmount);\n        return _calcFeeBasisPoints(_tokenIn, _tokenOut, usdgAmount);\n    }\n\n    function _calcFeeBasisPoints(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 usdgAmount\n    ) internal view returns (uint256 feeBasisPoints) {\n        bool isStableSwap = IGmxVault(VAULT).stableTokens(_tokenIn) && IGmxVault(VAULT).stableTokens(_tokenOut);\n        uint256 baseBps = isStableSwap\n            ? IGmxVault(VAULT).stableSwapFeeBasisPoints()\n            : IGmxVault(VAULT).swapFeeBasisPoints();\n        uint256 taxBps = isStableSwap ? IGmxVault(VAULT).stableTaxBasisPoints() : IGmxVault(VAULT).taxBasisPoints();\n        uint256 feesBasisPoints0 = IGmxVault(VAULT).getFeeBasisPoints(_tokenIn, usdgAmount, baseBps, taxBps, true);\n        uint256 feesBasisPoints1 = IGmxVault(VAULT).getFeeBasisPoints(_tokenOut, usdgAmount, baseBps, taxBps, false);\n        // use the higher of the two fee basis points\n        feeBasisPoints = feesBasisPoints0 > feesBasisPoints1 ? feesBasisPoints0 : feesBasisPoints1;\n    }\n\n    //                                  SWAP                                  \\\\\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        IERC20(_tokenIn).safeTransfer(VAULT, _amountIn);\n        IGmxVault(VAULT).swap(\n            _tokenIn,\n            _tokenOut,\n            address(this) // No check for amount-out within swap function\n        );\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/KyberAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IKyberPool.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract KyberAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    uint256 public constant PRECISION = 1e18;\n    mapping(address => mapping(address => address)) internal TKNS_TO_POOL;\n\n    constructor(\n        string memory _name,\n        address[] memory _pools,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        addPools(_pools);\n    }\n\n    function addPools(address[] memory _pools) public onlyMaintainer {\n        // Note: Overrides existing if pool has same tkns but different APR\n        for (uint256 i = 0; i < _pools.length; i++) {\n            address tkn0 = IKyberPool(_pools[i]).token0();\n            address tkn1 = IKyberPool(_pools[i]).token1();\n            TKNS_TO_POOL[tkn0][tkn1] = _pools[i];\n            TKNS_TO_POOL[tkn1][tkn0] = _pools[i];\n        }\n    }\n\n    function removePools(address[] memory _pools) public onlyMaintainer {\n        // Note: Overrides existing if pool has same tkns but different APR\n        for (uint256 i = 0; i < _pools.length; i++) {\n            address tkn0 = IKyberPool(_pools[i]).token0();\n            address tkn1 = IKyberPool(_pools[i]).token1();\n            TKNS_TO_POOL[tkn0][tkn1] = address(0);\n            TKNS_TO_POOL[tkn1][tkn0] = address(0);\n        }\n    }\n\n    function getPool(address tkn0, address tkn1) public view returns (address) {\n        return TKNS_TO_POOL[tkn0][tkn1];\n    }\n\n    function _getAmountOut(\n        uint256 amountIn,\n        uint256 vReserveIn,\n        uint256 vReserveOut,\n        uint256 feeInPrecision\n    ) internal pure returns (uint256 amountOut) {\n        // Based on https://github.com/dynamic-amm/smart-contracts/blob/master/contracts/libraries/DMMLibrary.sol\n        uint256 amountInWithFee = (amountIn * (PRECISION - feeInPrecision)) / PRECISION;\n        uint256 numerator = amountInWithFee * vReserveOut;\n        uint256 denominator = vReserveIn + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_tokenIn == _tokenOut || _amountIn == 0) {\n            return 0;\n        }\n        address pool = getPool(_tokenIn, _tokenOut);\n        if (pool == address(0)) {\n            return 0;\n        }\n        (uint112 r0, uint112 r1, uint112 vr0, uint112 vr1, uint256 feeInPrecision) = IKyberPool(pool).getTradeInfo();\n        (uint112 reserveIn, uint112 reserveOut) = _tokenIn < _tokenOut ? (r0, r1) : (r1, r0);\n        (uint112 vReserveIn, uint112 vReserveOut) = _tokenIn < _tokenOut ? (vr0, vr1) : (vr1, vr0);\n        if (reserveIn > 0 && reserveOut > 0) {\n            uint256 _amountOut = _getAmountOut(_amountIn, vReserveIn, vReserveOut, feeInPrecision);\n            if (reserveOut > amountOut) amountOut = _amountOut;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal override {\n        address pair = getPool(_tokenIn, _tokenOut);\n        (uint256 amount0Out, uint256 amount1Out) = (_tokenIn < _tokenOut)\n            ? (uint256(0), _amountOut)\n            : (_amountOut, uint256(0));\n        IERC20(_tokenIn).safeTransfer(pair, _amountIn);\n        IKyberPool(pair).swap(amount0Out, amount1Out, to, new bytes(0));\n    }\n}\n"
    },
    "src/contracts/adapters/KyberElasticAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./UniswapV3likeAdapter.sol\";\n\ninterface IKyberPool {\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function swap(\n        address recipient,\n        int256 swapQty,\n        bool isToken0,\n        uint160 limitSqrtP,\n        bytes calldata data\n    ) external returns (int256 qty0, int256 qty1);\n}\n\ncontract KyberElasticAdapter is UniswapV3likeAdapter {\n    using SafeERC20 for IERC20;\n\n    mapping(address => mapping(address => address)) public tknsToPoolWL;\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        uint256 _quoterGasLimit,\n        address _quoter,\n        address[] memory _whitelistedPools\n    ) UniswapV3likeAdapter(_name, _swapGasEstimate, _quoter, _quoterGasLimit) {\n        addPoolsToWL(_whitelistedPools);\n    }\n\n    function addPoolsToWL(address[] memory pools) public onlyMaintainer {\n        for (uint256 i; i < pools.length; ++i) addPoolToWL(pools[i]);\n    }\n\n    function rmPoolsFromWL(address[] memory pools) external onlyMaintainer {\n        for (uint256 i; i < pools.length; ++i) rmPoolFromWL(pools[i]);\n    }\n\n    function addPoolToWL(address pool) internal {\n        address t0 = IKyberPool(pool).token0();\n        address t1 = IKyberPool(pool).token1();\n        tknsToPoolWL[t0][t1] = pool;\n        tknsToPoolWL[t1][t0] = pool;\n    }\n\n    function rmPoolFromWL(address pool) internal {\n        address t0 = IKyberPool(pool).token0();\n        address t1 = IKyberPool(pool).token1();\n        tknsToPoolWL[t0][t1] = address(0);\n        tknsToPoolWL[t1][t0] = address(0);\n    }\n\n    function _underlyingSwap(\n        QParams memory params, \n        bytes memory callbackData\n    ) internal override returns (uint256) {\n        address pool = getBestPool(params.tokenIn, params.tokenOut);\n        (bool zeroForOne, uint160 sqrtPriceLimitX96) = \n            getZeroOneAndSqrtPriceLimitX96(params.tokenIn, params.tokenOut);\n        (int256 amount0, int256 amount1) = IKyberPool(pool).swap(\n            address(this),\n            int256(params.amountIn),\n            zeroForOne,\n            sqrtPriceLimitX96,\n            callbackData\n        );\n        return zeroForOne ? uint256(-amount1) : uint256(-amount0);\n    }\n\n    function getBestPool(\n        address token0, \n        address token1\n    ) internal view override returns (address) {\n        return tknsToPoolWL[token0][token1];\n    }\n\n    function swapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata\n    ) external {\n        if (amount0Delta > 0) {\n            IERC20(IKyberPool(msg.sender).token0()).transfer(msg.sender, uint256(amount0Delta));\n        } else {\n            IERC20(IKyberPool(msg.sender).token1()).transfer(msg.sender, uint256(amount1Delta));\n        }\n    }\n}\n"
    },
    "src/contracts/adapters/LB2Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\n\nimport \"../YakAdapter.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../interface/ILBFactory.sol\";\nimport \"../interface/ILB2Pair.sol\";\n\nstruct LBQuote {\n    uint256 amountOut;\n    address pair;\n    bool swapForY;\n}\n\ncontract LB2Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public immutable FACTORY;\n    bool public allowIgnoredPairs = true;\n    bool public allowExternalPairs = true;\n    uint256 public quoteGasLimit = 600_000;\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        uint256 _quoteGasLimit,\n        address _factory\n    ) YakAdapter(_name, _swapGasEstimate) {\n        setQuoteGasLimit(_quoteGasLimit);\n        FACTORY = _factory;\n    }\n\n    function setAllowIgnoredPairs(bool _allowIgnoredPairs) external onlyMaintainer {\n        allowIgnoredPairs = _allowIgnoredPairs;\n    }\n\n    function setAllowExternalPairs(bool _allowExternalPairs) external onlyMaintainer {\n        allowExternalPairs = _allowExternalPairs;\n    }\n\n    function setQuoteGasLimit(uint256 _quoteGasLimit) public onlyMaintainer {\n        quoteGasLimit = _quoteGasLimit;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        (amountOut, , ) = _getBestQuote(_amountIn, _tokenIn, _tokenOut);\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _minAmountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal override {\n        (uint256 amountOut, address pair, bool swapForY) = _getBestQuote(_amountIn, _tokenIn, _tokenOut);\n        require(amountOut >= _minAmountOut, \"LBAdapter: insufficient amountOut received\");\n        IERC20(_tokenIn).transfer(pair, _amountIn);\n        ILBPair(pair).swap(swapForY, to);\n    }\n\n    function _getBestQuote(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    )\n        internal\n        view\n        returns (\n            uint256 amountOut,\n            address pair,\n            bool swapForY\n        )\n    {\n        ILBFactory.LBPairInformation[] memory LBPairsAvailable = ILBFactory(FACTORY).getAllLBPairs(_tokenIn, _tokenOut);\n\n        if (LBPairsAvailable.length > 0 && _amountIn > 0) {\n            for (uint256 i; i < LBPairsAvailable.length; ++i) {\n                if (!LBPairsAvailable[i].ignoredForRouting && !allowIgnoredPairs) {\n                    continue;\n                }\n                if (!LBPairsAvailable[i].createdByOwner && !allowExternalPairs) {\n                    continue;\n                }\n\n                swapForY = ILBPair(LBPairsAvailable[i].LBPair).getTokenY() == _tokenOut;\n                uint256 swapAmountOut = getQuote(LBPairsAvailable[i].LBPair, _amountIn, swapForY);\n\n                if (swapAmountOut > amountOut) {\n                    amountOut = swapAmountOut;\n                    pair = LBPairsAvailable[i].LBPair;\n                }\n            }\n        }\n    }\n\n    function getQuote(\n        address pair,\n        uint256 amountIn,\n        bool swapForY\n    ) internal view returns (uint256 out) {\n        try ILBPair(pair).getSwapOut{gas: quoteGasLimit}(\n            uint128(amountIn), \n            swapForY\n        ) returns (uint128 amountInLeft, uint128 amountOut, uint128) {\n            if (amountInLeft == 0) {\n                out = amountOut;\n            }\n        } catch {}\n    }\n}\n"
    },
    "src/contracts/adapters/LBAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../YakAdapter.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../interface/ILBRouter.sol\";\nimport \"../interface/ILBFactory.sol\";\nimport \"../interface/ILBPair.sol\";\n\nstruct LBQuote {\n    uint256 amountOut;\n    address pair;\n    bool swapForY;\n}\n\ncontract LBAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public immutable FACTORY;\n    address public immutable ROUTER;\n    bool public allowIgnoredPairs = true;\n    bool public allowExternalPairs = true;\n    uint256 public quoteGasLimit = 600_000;\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        address _router\n    ) YakAdapter(_name, _swapGasEstimate) {\n        FACTORY = ILBRouter(_router).factory();\n        ROUTER = _router;\n    }\n\n    function setAllowIgnoredPairs(bool _allowIgnoredPairs) external onlyMaintainer {\n        allowIgnoredPairs = _allowIgnoredPairs;\n    }\n\n    function setAllowExternalPairs(bool _allowExternalPairs) external onlyMaintainer {\n        allowExternalPairs = _allowExternalPairs;\n    }\n\n    function setQuoteGasLimit(uint256 _quoteGasLimit) external onlyMaintainer {\n        quoteGasLimit = _quoteGasLimit;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        (amountOut, , ) = _getBestQuote(_amountIn, _tokenIn, _tokenOut);\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _minAmountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal override {\n        (uint256 amountOut, address pair, bool swapForY) = _getBestQuote(_amountIn, _tokenIn, _tokenOut);\n        require(amountOut >= _minAmountOut, \"LBAdapter: insufficient amountOut received\");\n        IERC20(_tokenIn).transfer(pair, _amountIn);\n        ILBPair(pair).swap(swapForY, to);\n    }\n\n    function _getBestQuote(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    )\n        internal\n        view\n        returns (\n            uint256 amountOut,\n            address pair,\n            bool swapForY\n        )\n    {\n        ILBFactory.LBPairInformation[] memory LBPairsAvailable = ILBFactory(FACTORY).getAllLBPairs(_tokenIn, _tokenOut);\n\n        if (LBPairsAvailable.length > 0 && _amountIn > 0) {\n            for (uint256 i; i < LBPairsAvailable.length; ++i) {\n                if (!LBPairsAvailable[i].ignoredForRouting && !allowIgnoredPairs) {\n                    continue;\n                }\n                if (!LBPairsAvailable[i].createdByOwner && !allowExternalPairs) {\n                    continue;\n                }\n\n                swapForY = ILBPair(LBPairsAvailable[i].LBPair).tokenY() == _tokenOut;\n                uint256 swapAmountOut = getQuote(LBPairsAvailable[i].LBPair, _amountIn, swapForY);\n\n                if (swapAmountOut > amountOut) {\n                    amountOut = swapAmountOut;\n                    pair = LBPairsAvailable[i].LBPair;\n                }\n            }\n        }\n    }\n\n    function getQuote(\n        address pair,\n        uint256 amountIn,\n        bool swapForY\n    ) internal view returns (uint256 amountOut) {\n        bytes memory calldata_ = abi.encodeWithSignature(\"getSwapOut(address,uint256,bool)\", pair, amountIn, swapForY);\n        (bool success, bytes memory data) = ROUTER.staticcall{ gas: quoteGasLimit }(calldata_);\n        if (success)\n            assembly {\n                amountOut := mload(add(data, 0x20))\n            }\n    }\n}\n"
    },
    "src/contracts/adapters/MiniYakAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ImYAK.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract MiniYakAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public constant YAK = 0x59414b3089ce2AF0010e7523Dea7E2b35d776ec7;\n    address public constant mYAK = 0xdDAaAD7366B455AfF8E7c82940C43CEB5829B604;\n\n    constructor(uint256 _swapGasEstimate) YakAdapter(\"MiniYakAdapter\", _swapGasEstimate) {\n        setAllowances();\n    }\n\n    function setAllowances() internal {\n        IERC20(mYAK).safeApprove(mYAK, UINT_MAX);\n        IERC20(YAK).safeApprove(mYAK, UINT_MAX);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal pure override returns (uint256 amountOut) {\n        if ((_tokenIn == mYAK && _tokenOut == YAK) || (_tokenIn == YAK && _tokenOut == mYAK)) {\n            amountOut = _amountIn;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        if (_tokenIn == mYAK && _tokenOut == YAK) {\n            ImYAK(mYAK).unmoon(_amountIn, _to);\n        } else if (_tokenIn == YAK && _tokenOut == mYAK) {\n            ImYAK(mYAK).moon(_amountIn, _to);\n        } else {\n            revert(\"Unsupported token\");\n        }\n    }\n}\n"
    },
    "src/contracts/adapters/PancakeV3Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./UniswapV3AdapterBase.sol\";\n\ncontract PancakeV3Adapter is UniswapV3AdapterBase {\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        uint256 _quoterGasLimit,\n        address _quoter,\n        address _factory,\n        uint24[] memory _defaultFees\n    ) UniswapV3AdapterBase(_name, _swapGasEstimate, _quoterGasLimit, _quoter, _factory, _defaultFees) {\n    }\n\n    function pancakeV3SwapCallback (\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata\n    ) external {\n        if (amount0Delta > 0) {\n            IERC20(IUniV3Pool(msg.sender).token0()).transfer(msg.sender, uint256(amount0Delta));\n        } else {\n            IERC20(IUniV3Pool(msg.sender).token1()).transfer(msg.sender, uint256(amount1Delta));\n        }\n    }\n}\n"
    },
    "src/contracts/adapters/PlatypusAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n//                              ,=.\n//                ,=\"\"\"\"==.__.=\"  o\".___\n//          ,=.==\"                  ___/\n//    ,==.,\"    ,          , \\,===\"\"\n//   <     ,==)  \\\"'\"=._.==)  \\\n//    `==''    `\"           `\"\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IPlatypus.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../interface/IWETH.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract PlatypusAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    event PartialPoolSupport(address pool, address[] tkns);\n    event AddPoolSupport(address pool);\n    event RmPoolSupport(address pool);\n\n    mapping(address => mapping(address => address)) private tknToTknToPool;\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        address[] memory _initPools\n    ) YakAdapter(_name, _swapGasEstimate) {\n        addPools(_initPools);\n    }\n\n    function getPoolForTkns(address tknIn, address tknOut) public view returns (address) {\n        return tknToTknToPool[tknIn][tknOut];\n    }\n\n    function _approveIfNeeded(address tkn, address spender) internal {\n        uint256 allowance = IERC20(tkn).allowance(address(this), spender);\n        if (allowance < UINT_MAX) {\n            IERC20(tkn).approve(spender, UINT_MAX);\n        }\n    }\n\n    // @dev Returns false if repeated tkns\n    function _poolSupportsTkns(address pool, address[] memory tkns) internal view returns (bool) {\n        address[] memory supportedTkns = IPlatypus(pool).getTokenAddresses();\n        uint256 supportedCount;\n        for (uint256 i = 0; i < supportedTkns.length; i++) {\n            for (uint256 j = 0; j < tkns.length; j++) {\n                if (supportedTkns[i] == tkns[j]) {\n                    supportedCount++;\n                    break;\n                }\n            }\n        }\n        return supportedCount == tkns.length;\n    }\n\n    function _setPoolForTkns(address[] memory tkns, address pool) internal {\n        for (uint256 i = 0; i < tkns.length; i++) {\n            for (uint256 j = 0; j < tkns.length; j++) {\n                if (i != j) {\n                    tknToTknToPool[tkns[i]][tkns[j]] = pool;\n                    if (pool != address(0)) {\n                        _approveIfNeeded(tkns[i], pool);\n                    }\n                }\n            }\n        }\n    }\n\n    function addPools(address[] memory pools) public onlyMaintainer {\n        for (uint256 i = 0; i < pools.length; i++) {\n            address pool = pools[i];\n            address[] memory supportedTkns = IPlatypus(pool).getTokenAddresses();\n            _setPoolForTkns(supportedTkns, pool);\n            emit AddPoolSupport(pool);\n        }\n    }\n\n    function setPoolForTkns(address pool, address[] memory tkns) external onlyMaintainer {\n        require(tkns.length > 1, \"At least two tkns\");\n        require(pool != address(0), \"Only non-zero pool\");\n        require(_poolSupportsTkns(pool, tkns), \"Pool does not support tkns\");\n        // Assume above checks there is no repeats\n        _setPoolForTkns(tkns, pool);\n        emit PartialPoolSupport(pool, tkns);\n    }\n\n    function rmPools(address[] calldata pools) external onlyMaintainer {\n        for (uint256 i = 0; i < pools.length; i++) {\n            address pool = pools[i];\n            address[] memory supportedTkns = IPlatypus(pool).getTokenAddresses();\n            _setPoolForTkns(supportedTkns, address(0));\n            emit RmPoolSupport(pool);\n        }\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        address pool = getPoolForTkns(_tokenIn, _tokenOut);\n        if (pool == address(0) || _amountIn == 0 || IPlatypus(pool).paused()) {\n            return 0;\n        }\n        try IPlatypus(pool).quotePotentialSwap(_tokenIn, _tokenOut, _amountIn) returns (uint256 amountOut) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        address pool = getPoolForTkns(_tokenIn, _tokenOut);\n        IPlatypus(pool).swap(_tokenIn, _tokenOut, _amountIn, _amountOut, _to, block.timestamp);\n    }\n}\n"
    },
    "src/contracts/adapters/PoolsideV1Adapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IButtonswapFactory.sol\";\nimport \"../interface/IButtonswapPair.sol\";\nimport \"../interface/IButtonTokenFactory.sol\";\nimport \"../interface/IButtonWrapper.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\nlibrary ButtonWrappersHandler {\n    function _query(\n        address _factory,\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256 amountOut) {\n        if (_tokenIn == _tokenOut || _amountIn == 0) {\n            return 0;\n        }\n        bool isTokenInWrapperToken = IButtonTokenFactory(_factory).isInstance(_tokenIn);\n        bool isTokenOutWrapperToken = IButtonTokenFactory(_factory).isInstance(_tokenOut);\n        if (isTokenInWrapperToken && isTokenOutWrapperToken) {\n            // Invalid in/out combination, as one ButtonWrapper token can never be the underlying for another\n            return 0;\n        }\n        if (isTokenInWrapperToken) {\n            if (IButtonWrapper(_tokenIn).underlying() != _tokenOut) {\n                // Invalid in/out combination if the input token's underlying is not the output token\n                return 0;\n            }\n            amountOut = IButtonWrapper(_tokenIn).wrapperToUnderlying(_amountIn);\n        } else if (isTokenOutWrapperToken) {\n            if (IButtonWrapper(_tokenOut).underlying() != _tokenIn) {\n                // Invalid in/out combination if the output token's underlying is not the input token\n                return 0;\n            }\n            amountOut = IButtonWrapper(_tokenOut).underlyingToWrapper(_amountIn);\n        }\n        // Else return 0\n    }\n\n    function _swap(\n        address _factory,\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal {\n        if (IButtonTokenFactory(_factory).isInstance(_tokenIn)) {\n            IButtonWrapper(_tokenIn).burnTo(to, _amountIn);\n        } else {\n            SafeERC20.safeApprove(IERC20(_tokenIn), _tokenOut, _amountIn);\n            IButtonWrapper(_tokenOut).depositFor(to, _amountIn);\n        }\n    }\n}\n\nlibrary PoolsideV1Handler {\n    /**\n     * @dev Returns sorted token addresses, used to handle return values from pairs sorted in this order\n     * @dev Based on https://github.com/buttonwood-protocol/buttonswap-periphery/blob/main/src/libraries/ButtonswapLibrary.sol#L30\n     * @param tokenA First token address\n     * @param tokenB Second token address\n     * @return token0 First sorted token address\n     * @return token1 Second sorted token address\n     */\n    function _sortTokens(address tokenA, address tokenB) private pure returns (address token0, address token1) {\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n    }\n\n    /**\n     * @dev Fetches and sorts the pools and reservoirs for a pair.\n     *   - Pools are the current token balances in the pair contract serving as liquidity.\n     *   - Reservoirs are the current token balances in the pair contract not actively serving as liquidity.\n     * @dev Based on https://github.com/buttonwood-protocol/buttonswap-periphery/blob/main/src/libraries/ButtonswapLibrary.sol#L119\n     * @param _factory The address of the ButtonswapFactory\n     * @param tokenA First token address\n     * @param tokenB Second token address\n     * @return poolA Pool corresponding to tokenA\n     * @return poolB Pool corresponding to tokenB\n     * @return reservoirA Reservoir corresponding to tokenA\n     * @return reservoirB Reservoir corresponding to tokenB\n     */\n    function _getLiquidityBalances(\n        address _factory,\n        address tokenA,\n        address tokenB\n    )\n        private\n        view\n        returns (\n            uint256 poolA,\n            uint256 poolB,\n            uint256 reservoirA,\n            uint256 reservoirB\n        )\n    {\n        (address token0, ) = _sortTokens(tokenA, tokenB);\n        address pair = IButtonswapFactory(_factory).getPair(tokenA, tokenB);\n        (uint256 pool0, uint256 pool1, uint256 reservoir0, uint256 reservoir1, ) = IButtonswapPair(pair)\n            .getLiquidityBalances();\n        (poolA, poolB, reservoirA, reservoirB) = tokenA == token0\n            ? (pool0, pool1, reservoir0, reservoir1)\n            : (pool1, pool0, reservoir1, reservoir0);\n    }\n\n    /**\n     * @dev Given an input amount of an asset and pair pools, returns the maximum output amount of the other asset\n     * Factors in the fee on the input amount.\n     * @dev Based on https://github.com/buttonwood-protocol/buttonswap-periphery/blob/main/src/libraries/ButtonswapLibrary.sol#L221\n     * @param amountIn The input amount of the asset\n     * @param poolIn The balance of the input asset in the pool\n     * @param poolOut The balance of the output asset in the pool\n     * @return amountOut The output amount of the other asset\n     */\n    function _getAmountOut(\n        uint256 amountIn,\n        uint256 poolIn,\n        uint256 poolOut\n    ) private pure returns (uint256 amountOut) {\n        if (amountIn == 0) {\n            return 0;\n        }\n        if (poolIn == 0 || poolOut == 0) {\n            return 0;\n        }\n        uint256 amountInWithFee = amountIn * 997;\n        uint256 numerator = amountInWithFee * poolOut;\n        uint256 denominator = (poolIn * 1000) + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    function _pairExists(\n        address _factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (bool exists) {\n        address pair = IButtonswapFactory(_factory).getPair(tokenA, tokenB);\n        exists = pair != address(0);\n    }\n\n    function _query(\n        address _factory,\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256 amountOut) {\n        if (_tokenIn == _tokenOut || _amountIn == 0) {\n            return 0;\n        }\n        address pair = IButtonswapFactory(_factory).getPair(_tokenIn, _tokenOut);\n        if (pair == address(0)) {\n            return 0;\n        }\n        (uint256 poolIn, uint256 poolOut, , ) = _getLiquidityBalances(_factory, _tokenIn, _tokenOut);\n        amountOut = _getAmountOut(_amountIn, poolIn, poolOut);\n    }\n\n    function _swap(\n        address _factory,\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal {\n        (uint256 poolIn, uint256 poolOut, , ) = _getLiquidityBalances(_factory, _tokenIn, _tokenOut);\n        uint256 _amountOut = _getAmountOut(_amountIn, poolIn, poolOut);\n        address pair = IButtonswapFactory(_factory).getPair(_tokenIn, _tokenOut);\n        (address token0, ) = _sortTokens(_tokenIn, _tokenOut);\n        (uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out) = _tokenIn == token0\n            ? (_amountIn, uint256(0), uint256(0), _amountOut)\n            : (uint256(0), _amountIn, _amountOut, uint256(0));\n        SafeERC20.safeApprove(IERC20(_tokenIn), pair, _amountIn);\n        IButtonswapPair(pair).swap(amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    function _swap(\n        address _factory,\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal {\n        address pair = IButtonswapFactory(_factory).getPair(_tokenIn, _tokenOut);\n        (address token0, ) = _sortTokens(_tokenIn, _tokenOut);\n        (uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out) = _tokenIn == token0\n            ? (_amountIn, uint256(0), uint256(0), _amountOut)\n            : (uint256(0), _amountIn, _amountOut, uint256(0));\n        SafeERC20.safeApprove(IERC20(_tokenIn), pair, _amountIn);\n        IButtonswapPair(pair).swap(amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n}\n\ncontract PoolsideV1Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public immutable buttonswapFactory;\n    address public immutable buttonTokenFactory;\n\n    constructor(\n        string memory _name,\n        address _buttonswapFactory,\n        address _buttonTokenFactory,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        buttonswapFactory = _buttonswapFactory;\n        buttonTokenFactory = _buttonTokenFactory;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_tokenIn == _tokenOut || _amountIn == 0) {\n            return 0;\n        }\n        address _buttonswapFactory = buttonswapFactory;\n        address _buttonTokenFactory = buttonTokenFactory;\n        bool isTokenInWrapperToken = IButtonTokenFactory(_buttonTokenFactory).isInstance(_tokenIn);\n        bool isTokenOutWrapperToken = IButtonTokenFactory(_buttonTokenFactory).isInstance(_tokenOut);\n        if (isTokenInWrapperToken && isTokenOutWrapperToken) {\n            // Invalid in/out combination for ButtonWrappers, as one ButtonWrapper token can never be the underlying for another\n            // Check if PoolsideV1 has this as a pair\n            return PoolsideV1Handler._query(_buttonswapFactory, _amountIn, _tokenIn, _tokenOut);\n        }\n        if (isTokenInWrapperToken && IButtonWrapper(_tokenIn).underlying() == _tokenOut) {\n            return ButtonWrappersHandler._query(_buttonTokenFactory, _amountIn, _tokenIn, _tokenOut);\n        } else if (isTokenOutWrapperToken && IButtonWrapper(_tokenOut).underlying() == _tokenIn) {\n            return ButtonWrappersHandler._query(_buttonTokenFactory, _amountIn, _tokenIn, _tokenOut);\n        }\n        // Check if direct pair\n        if (PoolsideV1Handler._pairExists(_buttonswapFactory, _tokenIn, _tokenOut)) {\n            return PoolsideV1Handler._query(_buttonswapFactory, _amountIn, _tokenIn, _tokenOut);\n        }\n        // Check if a ButtonToken hop exists\n        uint256 count = IButtonTokenFactory(_buttonTokenFactory).instanceCount();\n        for (uint256 i; i < count; i++) {\n            address instance = IButtonTokenFactory(_buttonTokenFactory).instanceAt(i);\n            if (\n                IButtonWrapper(instance).underlying() == _tokenIn &&\n                PoolsideV1Handler._pairExists(_buttonswapFactory, instance, _tokenOut)\n            ) {\n                uint256 amountHop = ButtonWrappersHandler._query(_buttonTokenFactory, _amountIn, _tokenIn, instance);\n                return PoolsideV1Handler._query(_buttonswapFactory, amountHop, instance, _tokenOut);\n            } else if (\n                IButtonWrapper(instance).underlying() == _tokenOut &&\n                PoolsideV1Handler._pairExists(_buttonswapFactory, _tokenIn, instance)\n            ) {\n                uint256 amountHop = PoolsideV1Handler._query(_buttonswapFactory, _amountIn, _tokenIn, instance);\n                return ButtonWrappersHandler._query(_buttonTokenFactory, amountHop, instance, _tokenOut);\n            }\n        }\n        // No hops possible\n        return 0;\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal override {\n        address _buttonswapFactory = buttonswapFactory;\n        address _buttonTokenFactory = buttonTokenFactory;\n        bool isTokenInWrapperToken = IButtonTokenFactory(_buttonTokenFactory).isInstance(_tokenIn);\n        bool isTokenOutWrapperToken = IButtonTokenFactory(_buttonTokenFactory).isInstance(_tokenOut);\n        if (isTokenInWrapperToken && isTokenOutWrapperToken) {\n            // Invalid in/out combination for ButtonWrappers, as one ButtonWrapper token can never be the underlying for another\n            PoolsideV1Handler._swap(_buttonswapFactory, _amountIn, _amountOut, _tokenIn, _tokenOut, to);\n            return;\n        }\n        if (isTokenInWrapperToken && IButtonWrapper(_tokenIn).underlying() == _tokenOut) {\n            ButtonWrappersHandler._swap(_buttonTokenFactory, _amountIn, _tokenIn, _tokenOut, to);\n            return;\n        } else if (isTokenOutWrapperToken && IButtonWrapper(_tokenOut).underlying() == _tokenIn) {\n            ButtonWrappersHandler._swap(_buttonTokenFactory, _amountIn, _tokenIn, _tokenOut, to);\n            return;\n        }\n        // Check if direct pair\n        if (PoolsideV1Handler._pairExists(_buttonswapFactory, _tokenIn, _tokenOut)) {\n            PoolsideV1Handler._swap(_buttonswapFactory, _amountIn, _amountOut, _tokenIn, _tokenOut, to);\n            return;\n        }\n        // Check if a ButtonToken hop exists\n        uint256 count = IButtonTokenFactory(_buttonTokenFactory).instanceCount();\n        for (uint256 i; i < count; i++) {\n            address instance = IButtonTokenFactory(_buttonTokenFactory).instanceAt(i);\n            if (\n                IButtonWrapper(instance).underlying() == _tokenIn &&\n                PoolsideV1Handler._pairExists(_buttonswapFactory, instance, _tokenOut)\n            ) {\n                ButtonWrappersHandler._swap(_buttonTokenFactory, _amountIn, _tokenIn, instance, address(this));\n                uint256 amountHop = IERC20(instance).balanceOf(address(this));\n                PoolsideV1Handler._swap(_buttonswapFactory, amountHop, instance, _tokenOut, to);\n                return;\n            } else if (\n                IButtonWrapper(instance).underlying() == _tokenOut &&\n                PoolsideV1Handler._pairExists(_buttonswapFactory, _tokenIn, instance)\n            ) {\n                PoolsideV1Handler._swap(_buttonswapFactory, _amountIn, _tokenIn, instance, address(this));\n                uint256 amountHop = IERC20(instance).balanceOf(address(this));\n                ButtonWrappersHandler._swap(_buttonTokenFactory, amountHop, instance, _tokenOut, to);\n                return;\n            }\n        }\n        // No hops possible\n    }\n}\n"
    },
    "src/contracts/adapters/RamsesV2Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./UniswapV3likeAdapter.sol\";\n\ninterface IUniV3Factory {\n    function feeAmountTickSpacing(uint24) external view returns (int24);\n\n    function getPool(\n        address,\n        address,\n        uint24\n    ) external view returns (address);\n}\n\ncontract RamsesV2Adapter is UniswapV3likeAdapter {\n    using SafeERC20 for IERC20;\n\n    address immutable FACTORY;\n    mapping(uint24 => bool) public isFeeAmountEnabled;\n    uint24[] public feeAmounts;\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        uint256 _quoterGasLimit,\n        address _quoter,\n        address _factory,\n        uint24[] memory _defaultFees\n    ) UniswapV3likeAdapter(_name, _swapGasEstimate, _quoter, _quoterGasLimit) {\n        FACTORY = _factory;\n        for (uint i = 0; i < _defaultFees.length; i++) {\n            addFeeAmount(_defaultFees[i]);\n        }\n    }\n\n    function enableFeeAmounts(uint24[] calldata _amounts) external onlyMaintainer {\n        for (uint256 i; i < _amounts.length; ++i) enableFeeAmount(_amounts[i]);\n    }\n\n    function enableFeeAmount(uint24 _fee) internal {\n        require(!isFeeAmountEnabled[_fee], \"Fee already enabled\");\n        if (IUniV3Factory(FACTORY).feeAmountTickSpacing(_fee) == 0)\n            revert(\"Factory doesn't support fee\");\n        addFeeAmount(_fee);\n    }\n\n    function addFeeAmount(uint24 _fee) internal {\n        isFeeAmountEnabled[_fee] = true;\n        feeAmounts.push(_fee);\n    }\n\n    function getBestPool(\n        address token0, \n        address token1\n    ) internal view override returns (address mostLiquid) {\n        uint128 deepestLiquidity;\n        for (uint256 i; i < feeAmounts.length; ++i) {\n            address pool = IUniV3Factory(FACTORY).getPool(token0, token1, feeAmounts[i]);\n            if (pool == address(0))\n                continue;\n            uint128 liquidity = IUniV3Pool(pool).liquidity();\n            if (liquidity > deepestLiquidity) {\n                deepestLiquidity = liquidity;\n                mostLiquid = pool;\n            }\n        }\n    }\n\n    function ramsesV2SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata\n    ) external {\n        if (amount0Delta > 0) {\n            IERC20(IUniV3Pool(msg.sender).token0()).transfer(msg.sender, uint256(amount0Delta));\n        } else {\n            IERC20(IUniV3Pool(msg.sender).token1()).transfer(msg.sender, uint256(amount1Delta));\n        }\n    }\n}\n"
    },
    "src/contracts/adapters/ReservoirAdapter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport { YakAdapter, IERC20, SafeERC20 } from \"../YakAdapter.sol\";\nimport { IGenericFactory } from \"../interface/IGenericFactory.sol\";\nimport { IQuoter } from \"../interface/IReservoirQuoter.sol\";\nimport { IReservoirPair } from \"../interface/IReservoirPair.sol\";\n\ncontract ReservoirAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    uint256 internal constant FEE_ACCURACY = 1_000_000;\n\n    IGenericFactory public immutable factory;\n    IQuoter public immutable quoter;\n\n    constructor(\n        string memory _name,\n        address _factory,\n        address _quoter,\n        uint256 _swapGasEstimate // we use the worse off i.e. the stable pair gas estimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        factory = IGenericFactory(_factory);\n        quoter = IQuoter(_quoter);\n    }\n\n    function _queryWithCurveId(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256 amountOut, uint256 curveId) {\n        if (_tokenIn == _tokenOut || _amountIn == 0) {\n            return (0, 0);\n        }\n\n        address[] memory path = new address[](2);\n        path[0] = _tokenIn;\n        path[1] = _tokenOut;\n        uint256[] memory curveIds = new uint256[](1);\n        curveIds[0] = 0;\n\n        uint256 constantProductAmtOut;\n        // try get quote for constant product pair\n        try quoter.getAmountsOut(_amountIn, path, curveIds) returns (uint256[] memory amtsOut) {\n            constantProductAmtOut = amtsOut[1];\n        } catch {}\n\n        curveIds[0] = 1;\n        uint256 stableAmtOut;\n        // try get quote for stable pair\n        try quoter.getAmountsOut(_amountIn, path, curveIds) returns (uint256[] memory amtsOut) {\n            stableAmtOut = amtsOut[1];\n        } catch {}\n\n        return stableAmtOut > constantProductAmtOut ? (stableAmtOut, 1) : (constantProductAmtOut, 0);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        (amountOut, ) = _queryWithCurveId(_amountIn, _tokenIn, _tokenOut);\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal override {\n        (uint256 amountOut, uint256 curveId) = _queryWithCurveId(_amountIn, _tokenIn, _tokenOut);\n        require(amountOut >= _amountOut, \"ResAdap: Insufficient amount out\");\n\n        address pair = factory.getPair(_tokenIn, _tokenOut, curveId);\n        address token0 = IReservoirPair(pair).token0();\n\n        IERC20(_tokenIn).safeTransfer(pair, _amountIn);\n        IReservoirPair(pair).swap(\n            _tokenIn == token0 ? int256(_amountIn) : -int256(_amountIn),\n            true,\n            to,\n            new bytes(0)\n        );\n    }\n}\n"
    },
    "src/contracts/adapters/SaddleAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ISaddle.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../interface/IWETH.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract SaddleAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    mapping(address => bool) public isPoolToken;\n    mapping(address => uint8) public tokenIndex;\n    address public pool;\n\n    constructor(\n        string memory _name,\n        address _pool,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        pool = _pool;\n        _setPoolTokens();\n    }\n\n    function _setPoolTokens() internal {\n        for (uint8 i = 0; true; i++) {\n            try ISaddle(pool).getToken(i) returns (address token) {\n                approveToPool(token, UINT_MAX);\n                isPoolToken[token] = true;\n                tokenIndex[token] = i;\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function approveToPool(address _tokenIn, uint256 _amount) internal {\n        uint256 allowance = IERC20(_tokenIn).allowance(address(this), pool);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).safeApprove(pool, UINT_MAX);\n        }\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (\n            !isPoolToken[_tokenIn] ||\n            !isPoolToken[_tokenOut] ||\n            _tokenIn == _tokenOut ||\n            _amountIn == 0 ||\n            ISaddle(pool).paused()\n        ) {\n            return 0;\n        }\n        try ISaddle(pool).calculateSwap(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        // Note that unsupported token will return index 0 which is valid\n        ISaddle(pool).swap(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn, _amountOut, block.timestamp);\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/SaddleMetaAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ISaddleMeta.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract SaddleMetaAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    uint256 public constant feeDenominator = 1e10;\n    mapping(address => bool) public isPoolToken;\n    mapping(address => uint8) public tokenIndex;\n    uint256 public poolFeeCompliment;\n    address public metaPool;\n    address public metaTkn;\n    address public pool;\n\n    constructor(\n        string memory _name,\n        address _pool,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        pool = _pool;\n        metaPool = ISaddleMeta(pool).metaSwapStorage(); // Pool that holds USDCe, USDTe, DAIe\n        _setPoolTokens();\n    }\n\n    // Mapping indicator which tokens are included in the pool\n    function _setPoolTokens() internal {\n        metaTkn = ISaddleMeta(pool).getToken(0);\n        approveToPool(metaTkn, UINT_MAX);\n        tokenIndex[metaTkn] = 0;\n        for (uint8 i = 0; true; i++) {\n            try ISaddleMeta(metaPool).getToken(i) returns (address token) {\n                approveToPool(token, UINT_MAX);\n                isPoolToken[token] = true;\n                tokenIndex[token] = i + 1;\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function approveToPool(address _tokenIn, uint256 _amount) internal {\n        uint256 allowance = IERC20(_tokenIn).allowance(address(this), pool);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).safeApprove(pool, UINT_MAX);\n        }\n    }\n\n    function _isPaused() internal view returns (bool) {\n        return ISaddleMeta(pool).paused() || ISaddleMeta(metaPool).paused();\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (validInput(_amountIn, _tokenIn, _tokenOut) && !_isPaused())\n            amountOut = _getAmountOutSafe(_amountIn, _tokenIn, _tokenOut);\n    }\n\n    function validInput(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (bool) {\n        return validPath(_tokenIn, _tokenOut) && _amountIn != 0;\n    }\n\n    function validPath(address tokenIn, address tokenOut) internal view returns (bool) {\n        return (tokenIn == metaTkn && isPoolToken[tokenOut]) || (tokenOut == metaTkn && isPoolToken[tokenIn]);\n    }\n\n    function _getAmountOutSafe(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256 amountOut) {\n        try ISaddleMeta(pool).calculateSwapUnderlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 _amountOut\n        ) {\n            amountOut = _applyError(_amountOut);\n        } catch {}\n    }\n\n    function _applyError(uint256 _amount) internal pure returns (uint256) {\n        return (_amount * 9998) / 10000;\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        ISaddleMeta(pool).swapUnderlying(\n            tokenIndex[_tokenIn],\n            tokenIndex[_tokenOut],\n            _amountIn,\n            _amountOut,\n            block.timestamp\n        );\n        uint256 balThis = IERC20(_tokenOut).balanceOf(address(this));\n        _returnTo(_tokenOut, balThis, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/UniswapV2Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IUniswapFactory.sol\";\nimport \"../interface/IUniswapPair.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract UniswapV2Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    uint256 internal constant FEE_DENOMINATOR = 1e3;\n    uint256 public immutable feeCompliment;\n    address public immutable factory;\n\n    constructor(\n        string memory _name,\n        address _factory,\n        uint256 _fee,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        feeCompliment = FEE_DENOMINATOR - _fee;\n        factory = _factory;\n    }\n\n    function _getAmountOut(\n        uint256 _amountIn,\n        uint256 _reserveIn,\n        uint256 _reserveOut\n    ) internal view returns (uint256 amountOut) {\n        // Based on https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/UniswapV2Router02.sol\n        uint256 amountInWithFee = _amountIn * feeCompliment;\n        uint256 numerator = amountInWithFee * _reserveOut;\n        uint256 denominator = _reserveIn * FEE_DENOMINATOR + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_tokenIn == _tokenOut || _amountIn == 0) {\n            return 0;\n        }\n        address pair = IUniswapFactory(factory).getPair(_tokenIn, _tokenOut);\n        if (pair == address(0)) {\n            return 0;\n        }\n        (uint256 r0, uint256 r1, ) = IUniswapPair(pair).getReserves();\n        (uint256 reserveIn, uint256 reserveOut) = _tokenIn < _tokenOut ? (r0, r1) : (r1, r0);\n        if (reserveIn > 0 && reserveOut > 0) {\n            amountOut = _getAmountOut(_amountIn, reserveIn, reserveOut);\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal override {\n        address pair = IUniswapFactory(factory).getPair(_tokenIn, _tokenOut);\n        (uint256 amount0Out, uint256 amount1Out) = (_tokenIn < _tokenOut)\n            ? (uint256(0), _amountOut)\n            : (_amountOut, uint256(0));\n        IERC20(_tokenIn).safeTransfer(pair, _amountIn);\n        IUniswapPair(pair).swap(amount0Out, amount1Out, to, new bytes(0));\n    }\n}\n"
    },
    "src/contracts/adapters/UniswapV3Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./UniswapV3AdapterBase.sol\";\n\ncontract UniswapV3Adapter is UniswapV3AdapterBase {\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        uint256 _quoterGasLimit,\n        address _quoter,\n        address _factory,\n        uint24[] memory _defaultFees\n    ) UniswapV3AdapterBase(_name, _swapGasEstimate, _quoterGasLimit, _quoter, _factory, _defaultFees) {\n    }\n\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata\n    ) external {\n        if (amount0Delta > 0) {\n            IERC20(IUniV3Pool(msg.sender).token0()).transfer(msg.sender, uint256(amount0Delta));\n        } else {\n            IERC20(IUniV3Pool(msg.sender).token1()).transfer(msg.sender, uint256(amount1Delta));\n        }\n    }\n}\n"
    },
    "src/contracts/adapters/UniswapV3AdapterBase.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./UniswapV3likeAdapter.sol\";\n\ninterface IUniV3Factory {\n    function feeAmountTickSpacing(uint24) external view returns (int24);\n\n    function getPool(\n        address,\n        address,\n        uint24\n    ) external view returns (address);\n}\n\ncontract UniswapV3AdapterBase is UniswapV3likeAdapter {\n    using SafeERC20 for IERC20;\n\n    address immutable FACTORY;\n    mapping(uint24 => bool) public isFeeAmountEnabled;\n    uint24[] public feeAmounts;\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        uint256 _quoterGasLimit,\n        address _quoter,\n        address _factory,\n        uint24[] memory _defaultFees\n    ) UniswapV3likeAdapter(_name, _swapGasEstimate, _quoter, _quoterGasLimit) {\n        FACTORY = _factory;\n        for (uint i = 0; i < _defaultFees.length; i++) {\n            addFeeAmount(_defaultFees[i]);\n        }\n    }\n\n    function enableFeeAmounts(uint24[] calldata _amounts) external onlyMaintainer {\n        for (uint256 i; i < _amounts.length; ++i) enableFeeAmount(_amounts[i]);\n    }\n\n    function enableFeeAmount(uint24 _fee) internal {\n        require(!isFeeAmountEnabled[_fee], \"Fee already enabled\");\n        if (IUniV3Factory(FACTORY).feeAmountTickSpacing(_fee) == 0)\n            revert(\"Factory doesn't support fee\");\n        addFeeAmount(_fee);\n    }\n\n    function addFeeAmount(uint24 _fee) internal {\n        isFeeAmountEnabled[_fee] = true;\n        feeAmounts.push(_fee);\n    }\n\n    function getBestPool(\n        address token0, \n        address token1\n    ) internal view override returns (address mostLiquid) {\n        uint128 deepestLiquidity;\n        for (uint256 i; i < feeAmounts.length; ++i) {\n            address pool = IUniV3Factory(FACTORY).getPool(token0, token1, feeAmounts[i]);\n            if (pool == address(0))\n                continue;\n            uint128 liquidity = IUniV3Pool(pool).liquidity();\n            if (liquidity > deepestLiquidity) {\n                deepestLiquidity = liquidity;\n                mostLiquid = pool;\n            }\n        }\n    }\n}\n"
    },
    "src/contracts/adapters/UniswapV3likeAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\nstruct QParams {\n    address tokenIn;\n    address tokenOut;\n    int256 amountIn;\n    uint24 fee;\n}\n\ninterface IUniV3Pool {\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function liquidity() external view returns (uint128);\n}\n\ninterface IUniV3Quoter {\n    function quoteExactInputSingle(\n        QParams memory params\n    ) external view returns (uint256);\n\n    function quote(\n        address,\n        bool,\n        int256,\n        uint160\n    ) external view returns (int256, int256);\n}\n\nabstract contract UniswapV3likeAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    uint256 public quoterGasLimit;\n    address public quoter;\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        address _quoter,\n        uint256 _quoterGasLimit\n    ) YakAdapter(_name, _swapGasEstimate) {\n        setQuoterGasLimit(_quoterGasLimit);\n        setQuoter(_quoter);\n    }\n\n    function setQuoter(address newQuoter) public onlyMaintainer {\n        quoter = newQuoter;\n    }\n\n    function setQuoterGasLimit(uint256 newLimit) public onlyMaintainer {\n        require(newLimit != 0, \"queryGasLimit can't be zero\");\n        quoterGasLimit = newLimit;\n    }\n\n    function getQuoteForPool(\n        address pool,\n        int256 amountIn,\n        address tokenIn,\n        address tokenOut\n    ) external view returns (uint256) {\n        QParams memory params;\n        params.amountIn = amountIn;\n        params.tokenIn = tokenIn;\n        params.tokenOut = tokenOut;\n        return getQuoteForPool(pool, params);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 quote) {\n        QParams memory params = getQParams(_amountIn, _tokenIn, _tokenOut);\n        quote = getQuoteForBestPool(params);\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        QParams memory params = getQParams(_amountIn, _tokenIn, _tokenOut);\n        uint256 amountOut = _underlyingSwap(params, new bytes(0));\n        require(amountOut >= _amountOut, \"Insufficient amountOut\");\n        _returnTo(_tokenOut, amountOut, _to);\n    }\n\n    function getQParams(\n        uint256 amountIn,\n        address tokenIn,\n        address tokenOut\n    ) internal pure returns (QParams memory params) {\n        params = QParams({ \n            amountIn: int256(amountIn), \n            tokenIn: tokenIn, \n            tokenOut: tokenOut, \n            fee: 0 \n        });\n    }\n\n    function _underlyingSwap(\n        QParams memory params, \n        bytes memory callbackData\n    ) internal virtual returns (uint256) {\n        address pool = getBestPool(params.tokenIn, params.tokenOut);\n        (bool zeroForOne, uint160 priceLimit) = getZeroOneAndSqrtPriceLimitX96(\n            params.tokenIn, \n            params.tokenOut\n        );\n        (int256 amount0, int256 amount1) = IUniV3Pool(pool).swap(\n            address(this),\n            zeroForOne,\n            int256(params.amountIn),\n            priceLimit,\n            callbackData\n        );\n        return zeroForOne ? uint256(-amount1) : uint256(-amount0);\n    }\n\n    function getQuoteForBestPool(\n        QParams memory params\n    ) internal view returns (uint256 quote) {\n        address bestPool = getBestPool(params.tokenIn, params.tokenOut);\n        if (bestPool != address(0)) quote = getQuoteForPool(bestPool, params);\n    }\n\n    function getBestPool(\n        address token0, \n        address token1\n    ) internal view virtual returns (address mostLiquid);\n    \n    function getQuoteForPool(\n        address pool, \n        QParams memory params\n    ) internal view returns (uint256) {\n        (bool zeroForOne, uint160 priceLimit) = getZeroOneAndSqrtPriceLimitX96(\n            params.tokenIn, \n            params.tokenOut\n        );\n        (int256 amount0, int256 amount1) = getQuoteSafe(\n            pool,\n            zeroForOne,\n            params.amountIn,\n            priceLimit\n        );\n        return zeroForOne ? uint256(-amount1) : uint256(-amount0);\n    }\n\n    function getQuoteSafe(\n        address pool, \n        bool zeroForOne,\n        int256 amountIn,\n        uint160 priceLimit\n    ) internal view returns (int256 amount0, int256 amount1) {\n        bytes memory calldata_ = abi.encodeWithSignature(\n            \"quote(address,bool,int256,uint160)\",\n            pool,\n            zeroForOne,\n            amountIn,\n            priceLimit\n        );\n        (bool success, bytes memory data) = staticCallQuoterRaw(calldata_);\n        if (success)\n            (amount0, amount1) = abi.decode(data, (int256, int256));\n    }\n\n    function staticCallQuoterRaw(\n        bytes memory calldata_\n    ) internal view returns (bool success, bytes memory data) {\n        (success, data) = quoter.staticcall{gas: quoterGasLimit}(calldata_);\n    }\n\n    function getZeroOneAndSqrtPriceLimitX96(address tokenIn, address tokenOut)\n        internal\n        pure\n        returns (bool zeroForOne, uint160 sqrtPriceLimitX96)\n    {\n        zeroForOne = tokenIn < tokenOut;\n        sqrtPriceLimitX96 = zeroForOne ? MIN_SQRT_RATIO+1 : MAX_SQRT_RATIO-1;\n    }\n}\n"
    },
    "src/contracts/adapters/VelodromeAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ninterface IPairFactory {\n    function isPair(address) external view returns (bool);\n\n    function pairCodeHash() external view returns (bytes32);\n}\n\ninterface IPair {\n    function getAmountOut(uint256, address) external view returns (uint256);\n\n    function swap(\n        uint256,\n        uint256,\n        address,\n        bytes calldata\n    ) external;\n}\n\ncontract VelodromeAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    bytes32 immutable PAIR_CODE_HASH;\n    address immutable FACTORY;\n\n    constructor(\n        string memory _name,\n        address _factory,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        FACTORY = _factory;\n        PAIR_CODE_HASH = getPairCodeHash(_factory);\n    }\n\n    function getPairCodeHash(address _factory) internal view returns (bytes32) {\n        return IPairFactory(_factory).pairCodeHash();\n    }\n\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) internal view returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            FACTORY,\n                            keccak256(abi.encodePacked(token0, token1, stable)),\n                            PAIR_CODE_HASH\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    function _getAmoutOutSafe(address pair, uint amountIn, address tokenIn) internal view returns (uint) {\n        try IPair(pair).getAmountOut(amountIn, tokenIn) returns (uint amountOut) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function getQuoteAndPair(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256 amountOut, address pair) {\n        address pairStable = pairFor(_tokenIn, _tokenOut, true);\n        uint256 amountStable;\n        uint256 amountVolatile;\n        if (IPairFactory(FACTORY).isPair(pairStable)) {\n            amountStable = _getAmoutOutSafe(pairStable, _amountIn, _tokenIn);\n        }\n        address pairVolatile = pairFor(_tokenIn, _tokenOut, false);\n        if (IPairFactory(FACTORY).isPair(pairVolatile)) {\n            amountVolatile = _getAmoutOutSafe(pairVolatile, _amountIn, _tokenIn);\n        }\n        (amountOut, pair) = amountStable > amountVolatile ? (amountStable, pairStable) : (amountVolatile, pairVolatile);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_tokenIn != _tokenOut && _amountIn != 0) (amountOut, ) = getQuoteAndPair(_amountIn, _tokenIn, _tokenOut);\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal override {\n        (uint256 amountOut, address pair) = getQuoteAndPair(_amountIn, _tokenIn, _tokenOut);\n        require(amountOut >= _amountOut, \"Insufficent amount out\");\n        (uint256 amount0Out, uint256 amount1Out) = (_tokenIn < _tokenOut)\n            ? (uint256(0), amountOut)\n            : (amountOut, uint256(0));\n        IERC20(_tokenIn).safeTransfer(pair, _amountIn);\n        IPair(pair).swap(amount0Out, amount1Out, to, new bytes(0));\n    }\n}\n"
    },
    "src/contracts/adapters/WAvaxAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../YakAdapter.sol\";\n\ncontract WAvaxAdapter is YakAdapter {\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n\n    constructor(uint256 _swapGasEstimate) YakAdapter(\"WAvaxAdapter\", _swapGasEstimate) {\n        setSwapGasEstimate(_swapGasEstimate);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal pure override returns (uint256 amountOut) {\n        if (_tokenIn == WAVAX && _tokenOut == WAVAX) {\n            amountOut = _amountIn;\n        }\n    }\n\n    function _swap(\n        uint256,\n        uint256 _amountOut,\n        address,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/WNativeAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../YakAdapter.sol\";\n\ncontract WNativeAdapter is YakAdapter {\n    address internal immutable WNATIVE;\n\n    constructor(\n        address _wNative,\n        uint256 _swapGasEstimate\n    ) YakAdapter(\"WAvaxAdapter\", _swapGasEstimate) {\n        WNATIVE = _wNative;\n        setSwapGasEstimate(_swapGasEstimate);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_tokenIn == WNATIVE && _tokenOut == WNATIVE)\n            amountOut = _amountIn;\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256,\n        address,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        _returnTo(_tokenOut, _amountIn, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/WombatAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n//                            ,=.\n//                ,=\"\"\"\"==.__.=\"  o\".___\n//          ,=.==\"                  ___/\n//    ,==.,\"    ,          , \\,===\"\"\n//   <     ,==)  \\\"'\"=._.==)  \\\n//    `==''    `\"           `\"\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IWombat.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../interface/IWETH.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract WombatAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    event PartialPoolSupport(address pool, address[] tkns);\n    event AddPoolSupport(address pool);\n    event RmPoolSupport(address pool);\n\n    mapping(address => mapping(address => address)) private tknToTknToPool;\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        address[] memory _initPools\n    ) YakAdapter(_name, _swapGasEstimate) {\n        addPools(_initPools);\n    }\n\n    function getPoolForTkns(address tknIn, address tknOut) public view returns (address) {\n        return tknToTknToPool[tknIn][tknOut];\n    }\n\n    function _approveIfNeeded(address tkn, address spender) internal {\n        uint256 allowance = IERC20(tkn).allowance(address(this), spender);\n        if (allowance < UINT_MAX) {\n            IERC20(tkn).approve(spender, UINT_MAX);\n        }\n    }\n\n    // @dev Returns false if repeated tkns\n    function _poolSupportsTkns(address pool, address[] memory tkns) internal view returns (bool) {\n        address[] memory supportedTkns = IWombat(pool).getTokens();\n        uint256 supportedCount;\n        for (uint256 i = 0; i < supportedTkns.length; i++) {\n            for (uint256 j = 0; j < tkns.length; j++) {\n                if (supportedTkns[i] == tkns[j]) {\n                    supportedCount++;\n                    break;\n                }\n            }\n        }\n        return supportedCount == tkns.length;\n    }\n\n    function _setPoolForTkns(address[] memory tkns, address pool) internal {\n        for (uint256 i = 0; i < tkns.length; i++) {\n            for (uint256 j = 0; j < tkns.length; j++) {\n                if (i != j) {\n                    tknToTknToPool[tkns[i]][tkns[j]] = pool;\n                    if (pool != address(0)) {\n                        _approveIfNeeded(tkns[i], pool);\n                    }\n                }\n            }\n        }\n    }\n\n    function addPools(address[] memory pools) public onlyMaintainer {\n        for (uint256 i = 0; i < pools.length; i++) {\n            address pool = pools[i];\n            address[] memory supportedTkns = IWombat(pool).getTokens();\n            _setPoolForTkns(supportedTkns, pool);\n            emit AddPoolSupport(pool);\n        }\n    }\n\n    function setPoolForTkns(address pool, address[] memory tkns) external onlyMaintainer {\n        require(tkns.length > 1, \"At least two tkns\");\n        require(pool != address(0), \"Only non-zero pool\");\n        require(_poolSupportsTkns(pool, tkns), \"Pool does not support tkns\");\n        // Assume above checks there is no repeats\n        _setPoolForTkns(tkns, pool);\n        emit PartialPoolSupport(pool, tkns);\n    }\n\n    function rmPools(address[] calldata pools) external onlyMaintainer {\n        for (uint256 i = 0; i < pools.length; i++) {\n            address pool = pools[i];\n            address[] memory supportedTkns = IWombat(pool).getTokens();\n            _setPoolForTkns(supportedTkns, address(0));\n            emit RmPoolSupport(pool);\n        }\n    }\n\n    function _query(uint256 _amountIn, address _tokenIn, address _tokenOut) internal view override returns (uint256) {\n        address pool = getPoolForTkns(_tokenIn, _tokenOut);\n        if (pool == address(0) || _amountIn == 0 || IWombat(pool).paused()) {\n            return 0;\n        }\n        try IWombat(pool).quotePotentialSwap(_tokenIn, _tokenOut, int256(_amountIn)) returns (uint256 amountOut) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        address pool = getPoolForTkns(_tokenIn, _tokenOut);\n        IWombat(pool).swap(_tokenIn, _tokenOut, _amountIn, _amountOut, _to, block.timestamp);\n    }\n}\n"
    },
    "src/contracts/adapters/WoofiAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport \"../interface/IWooPP.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract WoofiAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public immutable quoteToken;\n    address public immutable pool;\n    address public rebateCollector;\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        address _pool\n    ) YakAdapter(_name, _swapGasEstimate) {\n        address _quoteToken = IWooPP(_pool).quoteToken();\n        IERC20(_quoteToken).approve(_pool, UINT_MAX);\n        quoteToken = _quoteToken;\n        pool = _pool;\n    }\n\n    function setRebateCollector(address _rebateCollector) external onlyMaintainer {\n        rebateCollector = _rebateCollector;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_amountIn == 0) {\n            return 0;\n        }\n        if (_tokenIn == quoteToken) {\n            amountOut = _safeQuery(IWooPP(pool).querySellQuote, _tokenOut, _amountIn);\n        } else if (_tokenOut == quoteToken) {\n            amountOut = _safeQuery(IWooPP(pool).querySellBase, _tokenIn, _amountIn);\n        } else {\n            uint256 quoteAmount = _safeQuery(IWooPP(pool).querySellBase, _tokenIn, _amountIn);\n            amountOut = _safeQuery(IWooPP(pool).querySellQuote, _tokenOut, quoteAmount);\n        }\n    }\n\n    function _safeQuery(\n        function(address, uint256) external view returns (uint256) qFn,\n        address _baseToken,\n        uint256 _baseAmount\n    ) internal view returns (uint256) {\n        try qFn(_baseToken, _baseAmount) returns (uint256 amountOut) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        _approveIfNeeded(_tokenIn, _amountIn);\n        uint256 realToAmount;\n        if (_tokenIn == quoteToken) {\n            realToAmount = IWooPP(pool).sellQuote(_tokenOut, _amountIn, _amountOut, _to, rebateCollector);\n        } else if (_tokenOut == quoteToken) {\n            realToAmount = IWooPP(pool).sellBase(_tokenIn, _amountIn, _amountOut, _to, rebateCollector);\n        } else {\n            uint256 quoteAmount = IWooPP(pool).sellBase(_tokenIn, _amountIn, 0, address(this), rebateCollector);\n            realToAmount = IWooPP(pool).sellQuote(_tokenOut, quoteAmount, _amountOut, _to, rebateCollector);\n        }\n    }\n\n    function _approveIfNeeded(address _tokenIn, uint256 _amount) internal {\n        uint256 allowance = IERC20(_tokenIn).allowance(address(this), pool);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).approve(pool, UINT_MAX);\n        }\n    }\n}\n"
    },
    "src/contracts/adapters/WoofiV2Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport \"../interface/IWooPPV2.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract WoofiV2Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public immutable pool;\n    address public rebateCollector;\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        address _pool\n    ) YakAdapter(_name, _swapGasEstimate) {\n        pool = _pool;\n    }\n\n    function setRebateCollector(address _rebateCollector) external onlyMaintainer {\n        rebateCollector = _rebateCollector;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (_amountIn == 0) {\n            return 0;\n        }\n\n        try IWooPPV2(pool).query(_tokenIn, _tokenOut, _amountIn) returns (uint256 amountOut) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        IERC20(_tokenIn).safeTransfer(pool, _amountIn);\n        IWooPPV2(pool).swap(_tokenIn, _tokenOut, _amountIn, _amountOut, _to, rebateCollector);\n    }\n}\n"
    },
    "src/contracts/adapters/XJoeAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IxJOE.sol\";\nimport \"../lib/SafeERC20.sol\";\n\nimport \"../YakAdapter.sol\";\n\ncontract XJoeAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public constant JOE = 0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd;\n    address public constant XJOE = 0x57319d41F71E81F3c65F2a47CA4e001EbAFd4F33;\n\n    constructor(uint256 _swapGasEstimate) YakAdapter(\"XJoeAdapter\", _swapGasEstimate) {\n        setAllowances();\n    }\n\n    function setAllowances() internal {\n        IERC20(XJOE).safeApprove(XJOE, UINT_MAX);\n        IERC20(JOE).safeApprove(XJOE, UINT_MAX);\n    }\n\n    function queryEnter(uint256 _amountIn) internal view returns (uint256) {\n        uint256 totalJoe = IERC20(JOE).balanceOf(XJOE);\n        uint256 totalShares = IxJOE(XJOE).totalSupply();\n        if (totalShares == 0 || totalJoe == 0) {\n            return _amountIn;\n        }\n        return (_amountIn * totalShares) / totalJoe;\n    }\n\n    function queryLeave(uint256 _amountIn) internal view returns (uint256) {\n        uint256 totalShares = IxJOE(XJOE).totalSupply();\n        return (_amountIn * IERC20(JOE).balanceOf(XJOE)) / totalShares;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_tokenIn == JOE && _tokenOut == XJOE) {\n            return queryEnter(_amountIn);\n        } else if (_tokenIn == XJOE && _tokenOut == JOE) {\n            return queryLeave(_amountIn);\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        if (_tokenIn == JOE && _tokenOut == XJOE) {\n            IxJOE(XJOE).enter(_amountIn);\n        } else if (_tokenIn == XJOE && _tokenOut == JOE) {\n            IxJOE(XJOE).leave(_amountIn);\n        } else {\n            revert(\"XJoeAdapter: Unsupported token\");\n        }\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/YYDerivativeAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IYYDerivative.sol\";\nimport \"../lib/SafeERC20.sol\";\n\nimport \"../YakAdapter.sol\";\n\ncontract YYDerivativeAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public immutable derivative;\n    address public immutable underlying;\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        address _derivative,\n        address _underlying\n    ) YakAdapter(_name, _swapGasEstimate) {\n        derivative = _derivative;\n        underlying = _underlying;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_tokenIn == underlying && _tokenOut == derivative && IYYDerivative(derivative).depositsEnabled()) {\n            return _amountIn;\n        }\n        return 0;\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256, /*_amountOut*/\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        if (_tokenIn == underlying && _tokenOut == derivative) {\n            IERC20(underlying).approve(derivative, _amountIn);\n            IYYDerivative(derivative).deposit(_amountIn);\n        } else {\n            revert(\"YYDerivativeAdapter: Unsupported token\");\n        }\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountIn, _to);\n    }\n}\n"
    },
    "src/contracts/interface/IAaveAToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAaveAToken {\n    function POOL() external view returns (address);\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n}\n"
    },
    "src/contracts/interface/IAavePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAavePool {\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n}\n"
    },
    "src/contracts/interface/IBasePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IPoolSwapStructs.sol\";\n\ninterface IBasePool is IPoolSwapStructs {\n    function getPoolId() external view returns (bytes32);\n}\n"
    },
    "src/contracts/interface/IButtonswapFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.4;\n\n// https://github.com/buttonwood-protocol/buttonswap-core/blob/main/src/interfaces/IButtonswapFactory/IButtonswapFactory.sol\ninterface IButtonswapFactory {\n    /**\n     * @notice Get the (unique) Pair address created for the given combination of `tokenA` and `tokenB`.\n     * If the Pair does not exist then zero address is returned.\n     * @param tokenA The first unsorted token\n     * @param tokenB The second unsorted token\n     * @return pair The address of the Pair instance\n     */\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n"
    },
    "src/contracts/interface/IButtonswapPair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.4;\n\n// https://github.com/buttonwood-protocol/buttonswap-core/blob/main/src/interfaces/IButtonswapPair/IButtonswapPair.sol\ninterface IButtonswapPair {\n    /**\n     * @notice Get the current liquidity values.\n     * @return _pool0 The active `token0` liquidity\n     * @return _pool1 The active `token1` liquidity\n     * @return _reservoir0 The inactive `token0` liquidity\n     * @return _reservoir1 The inactive `token1` liquidity\n     * @return _blockTimestampLast The timestamp of when the price was last updated\n     */\n    function getLiquidityBalances()\n        external\n        view\n        returns (\n            uint112 _pool0,\n            uint112 _pool1,\n            uint112 _reservoir0,\n            uint112 _reservoir1,\n            uint32 _blockTimestampLast\n        );\n\n    /**\n     * @notice Swaps one token for the other, taking `amountIn0` of `token0` and `amountIn1` of `token1` from the sender and sending `amountOut0` of `token0` and `amountOut1` of `token1` to `to`.\n     * The price of the swap is determined by maintaining the \"K Invariant\".\n     * A 0.3% fee is collected to distribute between liquidity providers and the protocol.\n     * @dev The token deposits are deduced to be the delta between the current Pair contract token balances and the last stored balances.\n     * Optional calldata can be passed to `data`, which will be used to confirm the output token transfer with `to` if `to` is a contract that implements the {IButtonswapCallee} interface.\n     * Refer to [swap-math.md](https://github.com/buttonwood-protocol/buttonswap-core/blob/main/notes/swap-math.md) for more detail.\n     * @param amountIn0 The amount of `token0` that the sender sends\n     * @param amountIn1 The amount of `token1` that the sender sends\n     * @param amountOut0 The amount of `token0` that the recipient receives\n     * @param amountOut1 The amount of `token1` that the recipient receives\n     * @param to The account that receives the swap output\n     */\n    function swap(\n        uint256 amountIn0,\n        uint256 amountIn1,\n        uint256 amountOut0,\n        uint256 amountOut1,\n        address to\n    ) external;\n}\n"
    },
    "src/contracts/interface/IButtonTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.4;\n\ninterface IButtonTokenFactory {\n    //@dev https://github.com/buttonwood-protocol/button-wrappers/blob/main/contracts/utilities/InstanceRegistry.sol#L33\n    function isInstance(address instance) external view returns (bool validity);\n\n    //@dev https://github.com/buttonwood-protocol/button-wrappers/blob/main/contracts/utilities/InstanceRegistry.sol#L37\n    function instanceCount() external view returns (uint256 count);\n\n    //@dev https://github.com/buttonwood-protocol/button-wrappers/blob/main/contracts/utilities/InstanceRegistry.sol#L41\n    function instanceAt(uint256 index) external view returns (address instance);\n}\n"
    },
    "src/contracts/interface/IButtonWrapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.4;\n\n// https://github.com/buttonwood-protocol/button-wrappers/blob/main/contracts/interfaces/IButtonWrapper.sol\ninterface IButtonWrapper {\n    /// @return The address of the underlying token.\n    function underlying() external view returns (address);\n\n    /// @param uAmount The amount of underlying tokens.\n    /// @return The amount of wrapper tokens exchangeable.\n    function underlyingToWrapper(uint256 uAmount) external view returns (uint256);\n\n    /// @param amount The amount of wrapper tokens.\n    /// @return The amount of underlying tokens exchangeable.\n    function wrapperToUnderlying(uint256 amount) external view returns (uint256);\n\n    /// @notice Burns wrapper tokens from {msg.sender} and transfers\n    ///         the underlying tokens to the specified beneficiary.\n    /// @param to The beneficiary account.\n    /// @param amount The amount of wrapper tokens to burn.\n    /// @return The amount of underlying tokens withdrawn.\n    function burnTo(address to, uint256 amount) external returns (uint256);\n\n    /// @notice Transfers underlying tokens from {msg.sender} to the contract and\n    ///         mints wrapper tokens to the specified beneficiary.\n    /// @param to The beneficiary account.\n    /// @param uAmount The amount of underlying tokens to deposit.\n    /// @return The amount of wrapper tokens mint.\n    function depositFor(address to, uint256 uAmount) external returns (uint256);\n}\n"
    },
    "src/contracts/interface/ICurve1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICurve1 {\n    function underlying_coins(uint256 index) external view returns (address);\n\n    function exchange_underlying(\n        uint256 tokenIndexFrom,\n        uint256 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n\n    function get_dy_underlying(\n        uint256 tokenIndexFrom,\n        uint256 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n}\n"
    },
    "src/contracts/interface/ICurve2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICurve2 {\n    function underlying_coins(uint256 index) external view returns (address);\n\n    function get_dy_underlying(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function exchange_underlying(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n}\n"
    },
    "src/contracts/interface/ICurveMeta.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICurveMeta {\n    function base_coins(uint256) external view returns (address);\n\n    function coins(uint256 index) external view returns (address);\n\n    function get_dy_underlying(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function exchange_underlying(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n}\n"
    },
    "src/contracts/interface/ICurvePlain128.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICurvePlain128 {\n    function coins(uint256 index) external view returns (address);\n\n    function exchange(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external returns (uint256);\n\n    function get_dy(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n}\n"
    },
    "src/contracts/interface/ICurvePlain128Native.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICurvePlain128Native {\n    function coins(uint256 index) external view returns (address);\n\n    function exchange(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external payable returns (uint256);\n\n    function get_dy(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n}\n"
    },
    "src/contracts/interface/ICurvePlain256.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICurvePlain256 {\n    function coins(uint256 index) external view returns (address);\n\n    function exchange(\n        uint256 tokenIndexFrom,\n        uint256 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n\n    function get_dy(\n        uint256 tokenIndexFrom,\n        uint256 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n}\n"
    },
    "src/contracts/interface/IDodoV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IDodoHelper {\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\ninterface IDodoV1 {\n    function _QUOTE_TOKEN_() external view returns (address);\n\n    function _BASE_TOKEN_() external view returns (address);\n\n    function querySellBaseToken(uint256 amount) external view returns (uint256);\n\n    function queryBuyBaseToken(uint256 amount) external view returns (uint256);\n\n    function sellBaseToken(\n        uint256 amount,\n        uint256 minReceiveQuote,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function buyBaseToken(\n        uint256 amount,\n        uint256 maxPayQuote,\n        bytes calldata data\n    ) external returns (uint256);\n}\n"
    },
    "src/contracts/interface/IDodoV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IDodoV2 {\n    function _QUOTE_TOKEN_() external view returns (address);\n\n    function _BASE_TOKEN_() external view returns (address);\n\n    function querySellBase(address trader, uint256 payBaseAmount) external view returns (uint256 receiveQuoteAmount);\n\n    function querySellQuote(address trader, uint256 payQuoteAmount) external view returns (uint256 receiveBaseAmount);\n\n    function sellBase(address to) external returns (uint256 receiveQuoteAmount);\n\n    function sellQuote(address to) external returns (uint256 receiveBaseAmount);\n}\n"
    },
    "src/contracts/interface/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    event Approval(address, address, uint256);\n    event Transfer(address, address, uint256);\n\n    function name() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n\n    function allowance(address, address) external view returns (uint256);\n\n    function approve(address, uint256) external returns (bool);\n\n    function transfer(address, uint256) external returns (bool);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\n\n    function permit(\n        address,\n        address,\n        uint256,\n        uint256,\n        uint8,\n        bytes32,\n        bytes32\n    ) external; // Only tokens that support permit\n\n    function swap(address, uint256) external; // Only Avalanche bridge tokens\n\n    function swapSupply(address) external view returns (uint256); // Only Avalanche bridge tokens\n\n    function totalSupply() external view returns (uint256);\n}\n"
    },
    "src/contracts/interface/IgAVAX.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// @note: operator stands for interface address\ninterface IgAVAX {\n    function setApprovalForAll(address operator, bool approved) external;\n\n    function pricePerShare(uint256 _id) external view returns (uint256);\n\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    function isInterface(address operator, uint256 id) external view returns (bool);\n\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n}\n"
    },
    "src/contracts/interface/IGenericFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface IGenericFactory {\n    function allPairs() external view returns (address[] memory);\n    function getPair(address tokenA, address tokenB, uint256 curveId) external view returns (address);\n}\n"
    },
    "src/contracts/interface/IGeodePortal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IGeodePortal {\n    function gAVAX() external view returns (address);\n\n    function getNameFromId(uint256 _id) external view returns (bytes memory);\n\n    function planetCurrentInterface(uint256 _id) external view returns (address);\n\n    function planetWithdrawalPool(uint256 _id) external view returns (address);\n\n    function getMaintainerFromId(uint256) external view returns (address);\n\n    function isStakingPausedForPool(uint256) external view returns (bool);\n\n    function unpauseStakingForPool(uint256) external;\n\n    function pauseStakingForPool(uint256) external;\n\n    function stake(\n        uint256 planetId,\n        uint256 minGavax,\n        uint256 deadline\n    ) external payable returns (uint256 totalgAvax);\n}\n"
    },
    "src/contracts/interface/IGeodeWP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IGeodeWP {\n    function paused() external view returns (bool);\n\n    function getDebt() external view returns (uint256);\n\n    function getToken() external view returns (uint256);\n\n    function getERC1155() external view returns (address);\n\n    function getTokenBalance(uint8) external view returns (uint256);\n\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    function addLiquidity(\n        uint256[] calldata amounts,\n        uint256 minToMint,\n        uint256 deadline\n    ) external payable;\n}\n"
    },
    "src/contracts/interface/IGGAvax.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IGGAvax is IERC20 {\n    function maxDeposit(address _owner) external view returns (uint256);\n    function previewDeposit(uint256 assets) external view returns (uint256);\n    function previewRedeem(uint256 shares) external view returns (uint256);\n    function stakingTotalAssets() external view returns (uint256);\n    function totalAssets() external view returns (uint256);\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"
    },
    "src/contracts/interface/IGlpManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IGlpManager {\n    function getAumInUsdg(bool maximise) external view returns (uint256);\n\n    function vault() external view returns (address);\n}\n"
    },
    "src/contracts/interface/IGmxRewardRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IGmxRewardRouter {\n    function glpManager() external view returns (address);\n\n    function mintAndStakeGlp(\n        address _token,\n        uint256 _amount,\n        uint256 _minUsdg,\n        uint256 _minGlp\n    ) external returns (uint256);\n\n    function unstakeAndRedeemGlp(\n        address _tokenOut,\n        uint256 _glpAmount,\n        uint256 _minOut,\n        address _receiver\n    ) external returns (uint256);\n}\n"
    },
    "src/contracts/interface/IGmxVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IGmxVaultPriceFeed {\n    function getPrice(address, bool, bool, bool) external view returns (uint256);\n}\n\ninterface IGmxVaultUtils {\n    function getSwapFeeBasisPoints(address, address, uint256) external view returns (uint256);\n\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\n\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\n}\n\ninterface IGmxVault {\n    function swap(address, address, address) external;\n\n    function whitelistedTokens(address) external view returns (bool);\n\n    function isSwapEnabled() external view returns (bool);\n\n    function vaultUtils() external view returns (IGmxVaultUtils);\n\n    function priceFeed() external view returns (IGmxVaultPriceFeed);\n\n    function allWhitelistedTokensLength() external view returns (uint256);\n\n    function allWhitelistedTokens(uint256) external view returns (address);\n\n    function maxUsdgAmounts(address) external view returns (uint256);\n\n    function usdgAmounts(address) external view returns (uint256);\n\n    function reservedAmounts(address) external view returns (uint256);\n\n    function bufferAmounts(address) external view returns (uint256);\n\n    function poolAmounts(address) external view returns (uint256);\n\n    function usdg() external view returns (address);\n\n    function hasDynamicFees() external view returns (bool);\n\n    function stableTokens(address) external view returns (bool);\n\n    function getFeeBasisPoints(address, uint256, uint256, uint256, bool) external view returns (uint256);\n\n    function stableSwapFeeBasisPoints() external view returns (uint256);\n\n    function swapFeeBasisPoints() external view returns (uint256);\n\n    function stableTaxBasisPoints() external view returns (uint256);\n\n    function taxBasisPoints() external view returns (uint256);\n\n    function mintBurnFeeBasisPoints() external view returns (uint256);\n\n    function setBufferAmount(address, uint256) external;\n\n    function gov() external view returns (address);\n\n    function getMaxPrice(address _token) external view returns (uint256);\n\n    function getMinPrice(address _token) external view returns (uint256);\n\n    function adjustForDecimals(uint256 _amount, address _tokenDiv, address _tokenMul) external view returns (uint256);\n\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\n\n    function getTargetUsdgAmount(address _token) external view returns (uint256);\n}\n"
    },
    "src/contracts/interface/IKyberPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IKyberPool {\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function getTradeInfo()\n        external\n        view\n        returns (\n            uint112 _vReserve0,\n            uint112 _vReserve1,\n            uint112 reserve0,\n            uint112 reserve1,\n            uint256 feeInPrecision\n        );\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n}\n"
    },
    "src/contracts/interface/ILB2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ILBPair {\n    function getTokenX() external view returns (address);\n\n    function getTokenY() external view returns (address);\n\n    function swap(bool swapForY, address to) external returns (bytes32 amountsOut);\n\n    function getSwapOut(uint128 amountIn, bool swapForY)\n        external\n        view\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\n}\n"
    },
    "src/contracts/interface/ILBFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ILBFactory {\n    struct LBPairInformation {\n        uint24 binStep;\n        address LBPair;\n        bool createdByOwner;\n        bool ignoredForRouting;\n    }\n\n    function getAllLBPairs(address tokenX, address tokenY)\n        external\n        view\n        returns (LBPairInformation[] memory LBPairsBinStep);\n}\n"
    },
    "src/contracts/interface/ILBPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ILBPair {\n    function tokenX() external view returns (address);\n\n    function tokenY() external view returns (address);\n\n    function swap(bool sentTokenY, address to) external returns (uint256 amountXOut, uint256 amountYOut);\n}\n"
    },
    "src/contracts/interface/ILBRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ILBRouter {\n    function factory() external view returns (address);\n\n    function getSwapOut(\n        address pair,\n        uint256 amountIn,\n        bool swapForY\n    ) external view returns (uint256 amountOut, uint256 feesIn);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint256[] memory pairBinSteps,\n        address[] memory tokenPath,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountOut);\n}\n"
    },
    "src/contracts/interface/IMinimalSwapInfoPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IBasePool.sol\";\n\ninterface IMinimalSwapInfoPool is IBasePool {\n    function onSwap(\n        SwapRequest memory swapRequest,\n        uint256 currentBalanceTokenIn,\n        uint256 currentBalanceTokenOut\n    ) external view returns (uint256 amount);\n}\n"
    },
    "src/contracts/interface/ImYAK.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface ImYAK is IERC20 {\n    function unmoon(uint256, address) external;\n\n    function moon(uint256, address) external;\n}\n"
    },
    "src/contracts/interface/IPlatypus.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPlatypus {\n    // Views\n    function quotePotentialSwap(\n        address fromToken,\n        address totoken,\n        uint256 fromAmount\n    ) external view returns (uint256 potentialOutcome); // Second arg (haircut) is not used\n\n    function getTokenAddresses() external view returns (address[] memory);\n\n    function paused() external view returns (bool);\n\n    // Modifiers\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount,\n        uint256 minAmountOut,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function pause() external;\n\n    function unpause() external;\n}\n"
    },
    "src/contracts/interface/IPoolSwapStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IVault.sol\";\n\ninterface IPoolSwapStructs {\n    struct SwapRequest {\n        IVault.SwapKind kind;\n        IERC20 tokenIn;\n        IERC20 tokenOut;\n        uint256 amount;\n        bytes32 poolId;\n        uint256 lastChangeBlock;\n        address from;\n        address to;\n        bytes userData;\n    }\n}\n"
    },
    "src/contracts/interface/IReservoirPair.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface IReservoirPair {\n    function token0() external returns (address);\n    function token1() external returns (address);\n    function swap(int256 aAmount, bool aExactIn, address aTo, bytes calldata aData)\n        external\n        returns (uint256 rAmountOut);\n}\n"
    },
    "src/contracts/interface/IReservoirQuoter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface IQuoter {\n    /// @dev aPath array of ERC20 tokens to swap into\n    function getAmountsOut(uint256 aAmountIn, address[] calldata aPath, uint256[] calldata aCurveIds)\n        external\n        view\n        returns (uint256[] memory rAmountsOut);\n}\n"
    },
    "src/contracts/interface/ISaddle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface ISaddle {\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\n\n    function getTokenBalance(uint8 index) external view returns (uint256);\n\n    function getToken(uint8 index) external view returns (address);\n\n    function getVirtualPrice() external view returns (uint256);\n\n    function owner() external view returns (address);\n\n    function paused() external view returns (bool);\n\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function unpause() external;\n\n    function pause() external;\n\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n}\n"
    },
    "src/contracts/interface/ISaddleMeta.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\nstruct SwapStorage {\n    uint256 initialA;\n    uint256 futureA;\n    uint256 initialATime;\n    uint256 futureATime;\n    uint256 swapFee;\n    uint256 adminFee;\n    address lpToken;\n}\n\ninterface ISaddleMeta {\n    function getToken(uint8 index) external view returns (address);\n\n    function getVirtualPrice() external view returns (uint256);\n\n    function owner() external view returns (address);\n\n    function paused() external view returns (bool);\n\n    function calculateSwapUnderlying(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function unpause() external;\n\n    function pause() external;\n\n    function swapUnderlying(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function metaSwapStorage() external returns (address);\n\n    function swapStorage() external returns (SwapStorage memory);\n}\n"
    },
    "src/contracts/interface/ISAVAX.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface ISAVAX is IERC20 {\n    function getSharesByPooledAvax(uint256) external view returns (uint256);\n\n    function submit() external payable returns (uint256);\n\n    function mintingPaused() external view returns (bool);\n\n    function totalPooledAvax() external view returns (uint256);\n\n    function totalPooledAvaxCap() external view returns (uint256);\n}\n"
    },
    "src/contracts/interface/IStabilityFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IStabilityFund {\n    function swap(\n        address token0,\n        uint256 amount,\n        address token1\n    ) external;\n\n    function swapEnabled() external view returns (bool);\n\n    function isStableToken(address) external view returns (bool);\n\n    function isTokenDisabled(address) external view returns (bool);\n\n    function getStableTokens() external view returns (address[] memory);\n\n    function getStableTokensCount() external view returns (uint256);\n\n    function swapFee() external view returns (uint256);\n}\n"
    },
    "src/contracts/interface/IUniswapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IUniswapFactory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n"
    },
    "src/contracts/interface/IUniswapPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IUniswapPair {\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "src/contracts/interface/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IVault {\n    enum SwapKind {\n        GIVEN_IN,\n        GIVEN_OUT\n    }\n\n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        address assetIn;\n        address assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    function swap(\n        SingleSwap memory singleSwap,\n        FundManagement memory funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    function getPoolTokens(bytes32 poolId)\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            uint256[] memory balances,\n            uint256 lastChangeBlock\n        );\n\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        address[] memory assets,\n        FundManagement memory funds\n    ) external returns (int256[] memory assetDeltas);\n}\n"
    },
    "src/contracts/interface/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function withdraw(uint256 amount) external;\n\n    function deposit() external payable;\n}\n"
    },
    "src/contracts/interface/IWombat.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IWombat {\n    // Views\n    function quotePotentialSwap(\n        address fromToken,\n        address totoken,\n        int256 fromAmount\n    ) external view returns (uint256 potentialOutcome); // Second arg (haircut) is not used\n\n    function getTokens() external view returns (address[] memory);\n\n    function paused() external view returns (bool);\n\n    // Modifiers\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount,\n        uint256 minAmountOut,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function pause() external;\n\n    function unpause() external;\n}\n"
    },
    "src/contracts/interface/IWooPP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IWooPP {\n    function quoteToken() external view returns (address);\n\n    function querySellQuote(address, uint256) external view returns (uint256);\n\n    function querySellBase(address, uint256) external view returns (uint256);\n\n    function sellBase(\n        address baseToken,\n        uint256 baseAmount,\n        uint256 minQuoteAmount,\n        address to,\n        address rebateTo\n    ) external returns (uint256 quoteAmount);\n\n    function sellQuote(\n        address baseToken,\n        uint256 quoteAmount,\n        uint256 minBaseAmount,\n        address to,\n        address rebateTo\n    ) external returns (uint256 baseAmount);\n}\n"
    },
    "src/contracts/interface/IWooPPV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IWooPPV2 {\n    /// @notice The quote token address (immutable).\n    /// @return address of quote token\n    function quoteToken() external view returns (address);\n\n    /// @notice Gets the pool size of the specified token (swap liquidity).\n    /// @param token the token address\n    /// @return the pool size\n    function poolSize(address token) external view returns (uint256);\n\n    /// @notice Query the amount to swap `fromToken` to `toToken`, without checking the pool reserve balance.\n    /// @param fromToken the from token\n    /// @param toToken the to token\n    /// @param fromAmount the amount of `fromToken` to swap\n    /// @return toAmount the swapped amount of `toToken`\n    function tryQuery(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount\n    ) external view returns (uint256 toAmount);\n\n    /// @notice Query the amount to swap `fromToken` to `toToken`, with checking the pool reserve balance.\n    /// @dev tx reverts when 'toToken' balance is insufficient.\n    /// @param fromToken the from token\n    /// @param toToken the to token\n    /// @param fromAmount the amount of `fromToken` to swap\n    /// @return toAmount the swapped amount of `toToken`\n    function query(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount\n    ) external view returns (uint256 toAmount);\n\n    /// @notice Swap `fromToken` to `toToken`.\n    /// @param fromToken the from token\n    /// @param toToken the to token\n    /// @param fromAmount the amount of `fromToken` to swap\n    /// @param minToAmount the minimum amount of `toToken` to receive\n    /// @param to the destination address\n    /// @param rebateTo the rebate address (optional, can be address ZERO)\n    /// @return realToAmount the amount of toToken to receive\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount,\n        uint256 minToAmount,\n        address to,\n        address rebateTo\n    ) external returns (uint256 realToAmount);\n\n    /// @notice Deposit the specified token into the liquidity pool of WooPPV2.\n    /// @param token the token to deposit\n    /// @param amount the deposit amount\n    function deposit(address token, uint256 amount) external;\n}\n"
    },
    "src/contracts/interface/IxJOE.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IxJOE {\n    function leave(uint256) external;\n\n    function enter(uint256) external;\n\n    function totalSupply() external view returns (uint256);\n}\n"
    },
    "src/contracts/interface/IYYDerivative.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IYYDerivative {\n    function deposit(uint256 amount) external;\n\n    function depositsEnabled() external view returns (bool);\n}\n"
    },
    "src/contracts/lib/Maintainable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/**\n * @dev Contract module which extends the basic access control mechanism of Ownable\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\n * remove.\n *\n * By default, the owner account will be the one that deploys the contract. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available this modifier:\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\n * the accounts with the role of maintainer.\n */\n\nabstract contract Maintainable is Context, AccessControl {\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\"MAINTAINER_ROLE\");\n\n    constructor() {\n        address msgSender = _msgSender();\n        // members of the DEFAULT_ADMIN_ROLE alone may revoke and grant role membership\n        _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\n        _setupRole(MAINTAINER_ROLE, msgSender);\n    }\n\n    function addMaintainer(address addedMaintainer) public virtual {\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\n    }\n\n    function removeMaintainer(address removedMaintainer) public virtual {\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\n    }\n\n    function renounceRole(bytes32 role) public virtual {\n        address msgSender = _msgSender();\n        renounceRole(role, msgSender);\n    }\n\n    function transferOwnership(address newOwner) public virtual {\n        address msgSender = _msgSender();\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\n        renounceRole(DEFAULT_ADMIN_ROLE, msgSender);\n    }\n\n    modifier onlyMaintainer() {\n        address msgSender = _msgSender();\n        require(hasRole(MAINTAINER_ROLE, msgSender), \"Maintainable: Caller is not a maintainer\");\n        _;\n    }\n}\n"
    },
    "src/contracts/lib/SafeERC20.sol": {
      "content": "// This is a simplified version of OpenZepplin's SafeERC20 library\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../interface/IERC20.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "src/contracts/test/TestWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"../YakWrapper.sol\";\n\n\ninterface ISomeExternalContract {\n    function getWhitelistedTokens() external view returns (address[] memory);\n    function getWrappedToken() external view returns (address);\n    \n    function queryMint(address from, uint amount) external view returns (uint256);\n    function queryBurn(address to, uint amount) external view returns (uint256);\n\n    function mintWrappedToken(address from, uint amount) external;\n    function burnWrappedToken(address to, uint amount) external;\n}\n\ncontract TestWrapper is YakWrapper {\n    using SafeERC20 for IERC20;\n\n    address internal immutable someExternalContract;\n    mapping(address => bool) internal isWhitelisted;\n    address internal immutable wrappedToken;\n    address[] internal whitelistedTokens;\n\n    constructor(\n        string memory _name, \n        uint256 _gasEstimate, \n        address _someExternalContract\n    ) YakWrapper(_name, _gasEstimate) {\n        whitelistedTokens = ISomeExternalContract(_someExternalContract).getWhitelistedTokens();\n        wrappedToken = ISomeExternalContract(_someExternalContract).getWrappedToken();\n        someExternalContract = _someExternalContract;\n    }\n\n    function setWhitelistedTokens(address[] memory tokens) public onlyMaintainer {\n        for (uint i = 0; i < whitelistedTokens.length; i++) {\n            isWhitelisted[whitelistedTokens[i]] = false;\n        }\n        whitelistedTokens = tokens;\n        for (uint i = 0; i < tokens.length; i++) {\n            isWhitelisted[tokens[i]] = true;\n        }\n    }\n\n    function getTokensIn() override external view returns (address[] memory) {\n        return whitelistedTokens;\n    }\n\n    function getTokensOut() override external view returns (address[] memory) {\n        return whitelistedTokens;\n    }\n\n    function getWrappedToken() override external view returns (address) {\n        return wrappedToken;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) override internal view returns (uint256) {\n        if (_tokenIn == wrappedToken && isWhitelisted[_tokenOut]) {\n            return ISomeExternalContract(someExternalContract).queryBurn(_tokenOut, _amountIn);\n        } else if (_tokenOut == wrappedToken && isWhitelisted[_tokenIn]) {\n            return ISomeExternalContract(someExternalContract).queryMint(_tokenIn, _amountIn);\n        } else {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) override internal {\n        if (_tokenIn == wrappedToken && isWhitelisted[_tokenOut]) {\n            IERC20(_tokenOut).safeTransfer(someExternalContract, _amountIn);\n            ISomeExternalContract(someExternalContract).burnWrappedToken(_tokenOut, _amountIn);\n        } else if (_tokenOut == wrappedToken && isWhitelisted[_tokenIn]) {\n            IERC20(_tokenIn).safeTransfer(someExternalContract, _amountIn);\n            ISomeExternalContract(someExternalContract).mintWrappedToken(_tokenIn, _amountIn);\n        } else {\n            revert(\"Invalid token pair\");\n        }\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n\n}"
    },
    "src/contracts/wrappers/GlpWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"../YakWrapper.sol\";\nimport \"../interface/IGmxVault.sol\";\nimport \"../interface/IGlpManager.sol\";\nimport \"../interface/IGmxRewardRouter.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\n\nimport \"hardhat/console.sol\";\n\ncontract GlpWrapper is YakWrapper {\n    using SafeERC20 for IERC20;\n\n    uint256 public constant BASIS_POINTS_DIVISOR = 1e4;\n    uint256 public constant PRICE_PRECISION = 1e30;\n\n    address public immutable USDG;\n    address public immutable GLP;\n    address public immutable sGLP;\n    address public immutable vault;\n    address public immutable rewardRouter;\n    address public immutable glpManager;\n    address public immutable vaultUtils;\n\n    mapping(address => bool) internal isWhitelisted;\n    address[] internal whitelistedTokens;\n\n    constructor(string memory _name, uint256 _gasEstimate, address _gmxRewardRouter, address _glp, address _sGlp)\n        YakWrapper(_name, _gasEstimate)\n    {\n        address gmxGLPManager = IGmxRewardRouter(_gmxRewardRouter).glpManager();\n        address gmxVault = IGlpManager(gmxGLPManager).vault();\n        USDG = IGmxVault(gmxVault).usdg();\n        vaultUtils = address(IGmxVault(gmxVault).vaultUtils());\n        rewardRouter = _gmxRewardRouter;\n        vault = gmxVault;\n        glpManager = gmxGLPManager;\n        GLP = _glp;\n        sGLP = _sGlp;\n    }\n\n    function setWhitelistedTokens(address[] memory tokens) public onlyMaintainer {\n        for (uint256 i = 0; i < whitelistedTokens.length; i++) {\n            isWhitelisted[whitelistedTokens[i]] = false;\n        }\n        whitelistedTokens = tokens;\n        for (uint256 i = 0; i < tokens.length; i++) {\n            isWhitelisted[tokens[i]] = true;\n        }\n    }\n\n    function getTokensIn() external view override returns (address[] memory) {\n        return whitelistedTokens;\n    }\n\n    function getTokensOut() external view override returns (address[] memory) {\n        return whitelistedTokens;\n    }\n\n    function getWrappedToken() external view override returns (address) {\n        return sGLP;\n    }\n\n    function _query(uint256 _amountIn, address _tokenIn, address _tokenOut)\n        internal\n        view\n        override\n        returns (uint256 amountOut)\n    {\n        return (_tokenOut == sGLP) ? _quoteBuyGLP(_tokenIn, _amountIn) : _quoteSellGLP(_tokenOut, _amountIn);\n    }\n\n    function _quoteBuyGLP(address _tokenIn, uint256 _amountIn) internal view returns (uint256 amountOut) {\n        uint256 aumInUsdg = IGlpManager(glpManager).getAumInUsdg(true);\n        uint256 glpSupply = IERC20(GLP).totalSupply();\n        uint256 price = IGmxVault(vault).getMinPrice(_tokenIn);\n        uint256 usdgAmount = _calculateBuyUsdg(_amountIn, price, _tokenIn);\n        amountOut = aumInUsdg == 0 ? usdgAmount : (usdgAmount * glpSupply) / aumInUsdg;\n    }\n\n    function _calculateBuyUsdg(uint256 _amountIn, uint256 _price, address _tokenIn)\n        internal\n        view\n        returns (uint256 amountOut)\n    {\n        amountOut = (_amountIn * _price) / PRICE_PRECISION;\n        amountOut = IGmxVault(vault).adjustForDecimals(amountOut, _tokenIn, USDG);\n        uint256 feeBasisPoints = IGmxVaultUtils(vaultUtils).getBuyUsdgFeeBasisPoints(_tokenIn, amountOut);\n        uint256 amountAfterFees = (_amountIn * (BASIS_POINTS_DIVISOR - feeBasisPoints)) / BASIS_POINTS_DIVISOR;\n        amountOut = (amountAfterFees * _price) / PRICE_PRECISION;\n        amountOut = IGmxVault(vault).adjustForDecimals(amountOut, _tokenIn, USDG);\n    }\n\n    function _quoteSellGLP(address _tokenOut, uint256 _amountIn) internal view returns (uint256 amountOut) {\n        uint256 aumInUsdg = IGlpManager(glpManager).getAumInUsdg(false);\n        uint256 glpSupply = IERC20(GLP).totalSupply();\n        uint256 usdgAmount = (_amountIn * aumInUsdg) / glpSupply;\n        uint256 redemptionAmount = IGmxVault(vault).getRedemptionAmount(_tokenOut, usdgAmount);\n\n        uint256 poolAmount = IGmxVault(vault).poolAmounts(_tokenOut);\n        if (poolAmount < redemptionAmount) return 0;\n\n        poolAmount -= redemptionAmount;\n        if (IGmxVault(vault).reservedAmounts(_tokenOut) >= poolAmount) return 0;\n\n        uint256 feeBasisPoints = calculateSellUsdgFeeBasisPoints(_tokenOut, usdgAmount);\n        amountOut = (redemptionAmount * (BASIS_POINTS_DIVISOR - feeBasisPoints)) / BASIS_POINTS_DIVISOR;\n    }\n\n    function calculateSellUsdgFeeBasisPoints(address _token, uint256 _usdgDelta) internal view returns (uint256) {\n        uint256 usdgAmountToken = IGmxVault(vault).usdgAmounts(_token);\n        uint256 feeBasisPoints = IGmxVault(vault).mintBurnFeeBasisPoints();\n        uint256 taxBasisPoints = IGmxVault(vault).taxBasisPoints();\n        if (!IGmxVault(vault).hasDynamicFees()) {\n            return feeBasisPoints;\n        }\n\n        uint256 initialAmount = usdgAmountToken - _usdgDelta;\n        uint256 nextAmount = _usdgDelta > initialAmount ? 0 : initialAmount - _usdgDelta;\n\n        uint256 targetAmount = IGmxVault(vault).getTargetUsdgAmount(_token);\n        if (targetAmount == 0) {\n            return feeBasisPoints;\n        }\n\n        uint256 initialDiff = initialAmount > targetAmount ? initialAmount - targetAmount : targetAmount - initialAmount;\n        uint256 nextDiff = nextAmount > targetAmount ? nextAmount - targetAmount : targetAmount - nextAmount;\n\n        if (nextDiff < initialDiff) {\n            uint256 rebateBps = (taxBasisPoints * initialDiff) / targetAmount;\n            return rebateBps > feeBasisPoints ? 0 : feeBasisPoints - rebateBps;\n        }\n\n        uint256 averageDiff = (initialDiff + nextDiff) / 2;\n        if (averageDiff > targetAmount) {\n            averageDiff = targetAmount;\n        }\n        uint256 taxBps = (taxBasisPoints * averageDiff) / targetAmount;\n        return feeBasisPoints + taxBps;\n    }\n\n    function _swap(uint256 _amountIn, uint256 _amountOut, address _tokenIn, address _tokenOut, address _to)\n        internal\n        override\n    {}\n\n    function swap(uint256 _amountIn, uint256 _amountOut, address _fromToken, address _toToken, address _to)\n        external\n        override\n    {\n        uint256 toBalanceBefore = IERC20(_toToken).balanceOf(_to);\n        if (_toToken == sGLP) {\n            IERC20(_fromToken).approve(glpManager, _amountIn);\n            uint256 amount = IGmxRewardRouter(rewardRouter).mintAndStakeGlp(_fromToken, _amountIn, 0, _amountOut);\n            _returnTo(sGLP, amount, _to);\n        } else {\n            IGmxRewardRouter(rewardRouter).unstakeAndRedeemGlp(_toToken, _amountIn, _amountOut, _to);\n        }\n        uint256 diff = IERC20(_toToken).balanceOf(_to) - toBalanceBefore;\n        require(diff >= _amountOut, \"Insufficient amount-out\");\n        emit YakAdapterSwap(_fromToken, _toToken, _amountIn, _amountOut);\n    }\n}\n"
    },
    "src/contracts/wrappers/GlpWrapperFeeSelection.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"../YakWrapper.sol\";\nimport \"../interface/IGmxVault.sol\";\nimport \"../interface/IGlpManager.sol\";\nimport \"../interface/IGmxRewardRouter.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\n\ncontract GlpWrapperFeeSelection is YakWrapper {\n    using SafeERC20 for IERC20;\n\n    struct Fee {\n        address token;\n        uint256 basisPoints;\n    }\n\n    uint256 public constant BASIS_POINTS_DIVISOR = 1e4;\n    uint256 public constant PRICE_PRECISION = 1e30;\n\n    address public immutable USDG;\n    address public immutable GLP;\n    address public immutable sGLP;\n    address public immutable vault;\n    address public immutable rewardRouter;\n    address public immutable glpManager;\n    address public immutable vaultUtils;\n\n    address[] public whitelistedTokens;\n    uint256 public feeUsdgAmount;\n    uint256 public inOutCount;\n    mapping(address => bool) public isWhitelisted;\n\n    constructor(\n        string memory _name,\n        uint256 _gasEstimate,\n        address _gmxRewardRouter,\n        address[] memory _whiteListedTokens,\n        uint256 _feeUsdgAmount,\n        uint256 _inOutCount,\n        address _glp,\n        address _sGlp\n    ) YakWrapper(_name, _gasEstimate) {\n        address gmxGLPManager = IGmxRewardRouter(_gmxRewardRouter).glpManager();\n        address gmxVault = IGlpManager(gmxGLPManager).vault();\n        USDG = IGmxVault(gmxVault).usdg();\n\n        address utils;\n        try IGmxVault(gmxVault).vaultUtils() returns (IGmxVaultUtils gmxVaultUtils) {\n            utils = address(gmxVaultUtils);\n        } catch {}\n        vaultUtils = utils;\n\n        rewardRouter = _gmxRewardRouter;\n        setWhitelistedTokens(_whiteListedTokens);\n        feeUsdgAmount = _feeUsdgAmount;\n        inOutCount = _inOutCount;\n        vault = gmxVault;\n        glpManager = gmxGLPManager;\n        GLP = _glp;\n        sGLP = _sGlp;\n    }\n\n    function setWhitelistedTokens(address[] memory tokens) public onlyMaintainer {\n        for (uint256 i = 0; i < whitelistedTokens.length; i++) {\n            isWhitelisted[whitelistedTokens[i]] = false;\n        }\n        whitelistedTokens = tokens;\n        for (uint256 i = 0; i < tokens.length; i++) {\n            isWhitelisted[tokens[i]] = true;\n        }\n    }\n\n    function updateFeeSelectionProperties(uint256 _usdgAmount, uint256 _inOutCount) public onlyMaintainer {\n        feeUsdgAmount = _usdgAmount > 0 ? _usdgAmount : feeUsdgAmount;\n        inOutCount = _inOutCount > 0 ? _inOutCount : inOutCount;\n    }\n\n    function getWrappedToken() external view override returns (address) {\n        return sGLP;\n    }\n\n    function getTokensIn() external view override returns (address[] memory) {\n        Fee[] memory fees = _getFees(true);\n        return extractLowestFees(fees);\n    }\n\n    function getTokensOut() external view override returns (address[] memory) {\n        Fee[] memory fees = _getFees(false);\n        return extractLowestFees(fees);\n    }\n\n    function extractLowestFees(Fee[] memory fees) internal view returns (address[] memory tokensIn) {\n        tokensIn = new address[](fees.length >= inOutCount ? inOutCount : fees.length);\n        for (uint256 i; i < tokensIn.length; i++) {\n            tokensIn[i] = fees[i].token;\n        }\n    }\n\n    function _getFees(bool _buyGLP) internal view returns (Fee[] memory) {\n        uint256 length = whitelistedTokens.length;\n        uint256 mintBurnFeeBps = IGmxVault(vault).mintBurnFeeBasisPoints();\n        uint256 taxBps = IGmxVault(vault).taxBasisPoints();\n        Fee[] memory fees = new Fee[](length);\n        for (uint256 i; i < length; i++) {\n            address token = whitelistedTokens[i];\n            fees[i] = Fee({\n                token: token,\n                basisPoints: IGmxVault(vault).getFeeBasisPoints(token, feeUsdgAmount, mintBurnFeeBps, taxBps, _buyGLP)\n            });\n        }\n        return sort(fees);\n    }\n\n    function sort(Fee[] memory _fees) internal pure returns (Fee[] memory) {\n        uint256 length = _fees.length;\n        for (uint256 i = 1; i < length; i++) {\n            Fee memory current = _fees[i];\n            int256 j = int256(i - 1);\n            while ((j >= 0) && (_fees[uint256(j)].basisPoints > current.basisPoints)) {\n                _fees[uint256(j + 1)] = _fees[uint256(j)];\n                j--;\n            }\n            _fees[uint256(j + 1)] = current;\n        }\n        return _fees;\n    }\n\n    function _query(uint256 _amountIn, address _tokenIn, address _tokenOut)\n        internal\n        view\n        override\n        returns (uint256 amountOut)\n    {\n        return (_tokenOut == sGLP) ? _quoteBuyGLP(_tokenIn, _amountIn) : _quoteSellGLP(_tokenOut, _amountIn);\n    }\n\n    function _quoteBuyGLP(address _tokenIn, uint256 _amountIn) internal view returns (uint256 amountOut) {\n        uint256 aumInUsdg = IGlpManager(glpManager).getAumInUsdg(true);\n        uint256 glpSupply = IERC20(GLP).totalSupply();\n        uint256 price = IGmxVault(vault).getMinPrice(_tokenIn);\n        uint256 usdgAmount = _calculateBuyUsdg(_amountIn, price, _tokenIn);\n        amountOut = aumInUsdg == 0 ? usdgAmount : (usdgAmount * glpSupply) / aumInUsdg;\n    }\n\n    function _calculateBuyUsdg(uint256 _amountIn, uint256 _price, address _tokenIn)\n        internal\n        view\n        returns (uint256 amountOut)\n    {\n        amountOut = (_amountIn * _price) / PRICE_PRECISION;\n        amountOut = IGmxVault(vault).adjustForDecimals(amountOut, _tokenIn, USDG);\n        uint256 feeBasisPoints = _calculateBuyUsdgFeeBasisPoints(_tokenIn, amountOut);\n        uint256 amountAfterFees = (_amountIn * (BASIS_POINTS_DIVISOR - feeBasisPoints)) / BASIS_POINTS_DIVISOR;\n        amountOut = (amountAfterFees * _price) / PRICE_PRECISION;\n        amountOut = IGmxVault(vault).adjustForDecimals(amountOut, _tokenIn, USDG);\n    }\n\n    function _quoteSellGLP(address _tokenOut, uint256 _amountIn) internal view returns (uint256 amountOut) {\n        uint256 aumInUsdg = IGlpManager(glpManager).getAumInUsdg(false);\n        uint256 glpSupply = IERC20(GLP).totalSupply();\n        uint256 usdgAmount = (_amountIn * aumInUsdg) / glpSupply;\n        uint256 redemptionAmount = IGmxVault(vault).getRedemptionAmount(_tokenOut, usdgAmount);\n\n        uint256 poolAmount = IGmxVault(vault).poolAmounts(_tokenOut);\n        if (poolAmount < redemptionAmount) return 0;\n\n        poolAmount -= redemptionAmount;\n        if (IGmxVault(vault).reservedAmounts(_tokenOut) >= poolAmount) return 0;\n\n        uint256 feeBasisPoints = _calculateSellUsdgFeeBasisPoints(_tokenOut, usdgAmount);\n        amountOut = (redemptionAmount * (BASIS_POINTS_DIVISOR - feeBasisPoints)) / BASIS_POINTS_DIVISOR;\n    }\n\n    function _calculateBuyUsdgFeeBasisPoints(address _tokenIn, uint256 _usdgAmount) internal view returns (uint256) {\n        if (vaultUtils > address(0)) {\n            return IGmxVaultUtils(vaultUtils).getBuyUsdgFeeBasisPoints(_tokenIn, _usdgAmount);\n        }\n        uint256 mintBurnFeeBps = IGmxVault(vault).mintBurnFeeBasisPoints();\n        uint256 taxBps = IGmxVault(vault).taxBasisPoints();\n        return IGmxVault(vault).getFeeBasisPoints(_tokenIn, _usdgAmount, mintBurnFeeBps, taxBps, true);\n    }\n\n    function _calculateSellUsdgFeeBasisPoints(address _tokenOut, uint256 _usdgAmount) internal view returns (uint256) {\n        if (vaultUtils > address(0)) {\n            return IGmxVaultUtils(vaultUtils).getSellUsdgFeeBasisPoints(_tokenOut, _usdgAmount);\n        }\n        uint256 feeBasisPoints = IGmxVault(vault).mintBurnFeeBasisPoints();\n        uint256 taxBasisPoints = IGmxVault(vault).taxBasisPoints();\n        if (!IGmxVault(vault).hasDynamicFees()) {\n            return feeBasisPoints;\n        }\n\n        uint256 initialAmount = IGmxVault(vault).usdgAmounts(_tokenOut) - _usdgAmount;\n        uint256 nextAmount = _usdgAmount > initialAmount ? 0 : initialAmount - _usdgAmount;\n\n        uint256 targetAmount = IGmxVault(vault).getTargetUsdgAmount(_tokenOut);\n        if (targetAmount == 0) {\n            return feeBasisPoints;\n        }\n\n        uint256 initialDiff = initialAmount > targetAmount ? initialAmount - targetAmount : targetAmount - initialAmount;\n        uint256 nextDiff = nextAmount > targetAmount ? nextAmount - targetAmount : targetAmount - nextAmount;\n\n        if (nextDiff < initialDiff) {\n            uint256 rebateBps = (taxBasisPoints * initialDiff) / targetAmount;\n            return rebateBps > feeBasisPoints ? 0 : feeBasisPoints - rebateBps;\n        }\n\n        uint256 averageDiff = (initialDiff + nextDiff) / 2;\n        if (averageDiff > targetAmount) {\n            averageDiff = targetAmount;\n        }\n        uint256 taxBps = (taxBasisPoints * averageDiff) / targetAmount;\n        return feeBasisPoints + taxBps;\n    }\n\n    function _calculateFeeBasisPoints(address _token, uint256 _usdgAmount, bool _buyUsdg)\n        internal\n        view\n        returns (uint256 feeBasisPoints)\n    {}\n\n    function calculateSellUsdgFeeBasisPoints(address _token, uint256 _usdgDelta) internal view returns (uint256) {}\n\n    function _swap(uint256 _amountIn, uint256 _amountOut, address _tokenIn, address _tokenOut, address _to)\n        internal\n        override\n    {}\n\n    function swap(uint256 _amountIn, uint256 _amountOut, address _fromToken, address _toToken, address _to)\n        external\n        override\n    {\n        uint256 toBalanceBefore = IERC20(_toToken).balanceOf(_to);\n        if (_toToken == sGLP) {\n            IERC20(_fromToken).approve(glpManager, _amountIn);\n            uint256 amount = IGmxRewardRouter(rewardRouter).mintAndStakeGlp(_fromToken, _amountIn, 0, _amountOut);\n            _returnTo(sGLP, amount, _to);\n        } else {\n            IGmxRewardRouter(rewardRouter).unstakeAndRedeemGlp(_toToken, _amountIn, _amountOut, _to);\n        }\n        uint256 diff = IERC20(_toToken).balanceOf(_to) - toBalanceBefore;\n        require(diff >= _amountOut, \"Insufficient amount-out\");\n        emit YakAdapterSwap(_fromToken, _toToken, _amountIn, _amountOut);\n    }\n}\n"
    },
    "src/contracts/YakAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./interface/IERC20.sol\";\nimport \"./lib/SafeERC20.sol\";\nimport \"./lib/Maintainable.sol\";\n\nabstract contract YakAdapter is Maintainable {\n    using SafeERC20 for IERC20;\n\n    event YakAdapterSwap(address indexed _tokenFrom, address indexed _tokenTo, uint256 _amountIn, uint256 _amountOut);\n    event UpdatedGasEstimate(address indexed _adapter, uint256 _newEstimate);\n    event Recovered(address indexed _asset, uint256 amount);\n\n    uint256 internal constant UINT_MAX = type(uint256).max;\n    uint256 public swapGasEstimate;\n    string public name;\n\n    constructor(string memory _name, uint256 _gasEstimate) {\n        setName(_name);\n        setSwapGasEstimate(_gasEstimate);\n    }\n\n    function setName(string memory _name) internal {\n        require(bytes(_name).length != 0, \"Invalid adapter name\");\n        name = _name;\n    }\n\n    function setSwapGasEstimate(uint256 _estimate) public onlyMaintainer {\n        require(_estimate != 0, \"Invalid gas-estimate\");\n        swapGasEstimate = _estimate;\n        emit UpdatedGasEstimate(address(this), _estimate);\n    }\n\n    function revokeAllowance(address _token, address _spender) external onlyMaintainer {\n        IERC20(_token).safeApprove(_spender, 0);\n    }\n\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyMaintainer {\n        require(_tokenAmount > 0, \"YakAdapter: Nothing to recover\");\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\n        emit Recovered(_tokenAddress, _tokenAmount);\n    }\n\n    function recoverAVAX(uint256 _amount) external onlyMaintainer {\n        require(_amount > 0, \"YakAdapter: Nothing to recover\");\n        payable(msg.sender).transfer(_amount);\n        emit Recovered(address(0), _amount);\n    }\n\n    function query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) external view returns (uint256) {\n        return _query(_amountIn, _tokenIn, _tokenOut);\n    }\n\n    function swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _fromToken,\n        address _toToken,\n        address _to\n    ) external virtual {\n        uint256 toBal0 = IERC20(_toToken).balanceOf(_to);\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\n        uint256 diff = IERC20(_toToken).balanceOf(_to) - toBal0;\n        require(diff >= _amountOut, \"Insufficient amount-out\");\n        emit YakAdapterSwap(_fromToken, _toToken, _amountIn, _amountOut);\n    }\n\n    function _returnTo(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) internal {\n        if (address(this) != _to) IERC20(_token).safeTransfer(_to, _amount);\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _fromToken,\n        address _toToken,\n        address _to\n    ) internal virtual;\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view virtual returns (uint256);\n\n    receive() external payable {}\n}\n"
    },
    "src/contracts/YakWrapper.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./YakAdapter.sol\";\n\nabstract contract YakWrapper is YakAdapter {\n\n    constructor(string memory name, uint256 gasEstimate) YakAdapter(name, gasEstimate) {}\n\n    function getTokensIn() external view virtual returns (address[] memory);\n    function getTokensOut() external view virtual returns (address[] memory);\n    function getWrappedToken() external view virtual returns (address);\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}